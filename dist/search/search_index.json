{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CVS Version Control Specification # Manual # How to Use and Administer CVS Version 1.12.13 # Overview : An introduction to CVS Repository : Where all your sources are stored Starting a new project : Starting a project with CVS Revisions : Numeric and symbolic names for revisions Branching and merging : Diverging/rejoining branches of development Recursive behavior : CVS descends directories Adding and removing : Adding/removing/renaming files/directories History browsing : Viewing the history of files in various ways CVS and the Real World # Binary Files : CVS can handle binary files Multiple Developers : How CVS helps a group of Developers Revision Management : Policy questions for revision management Keyword Substitution : CVS can include the revision inside the file Tracking Sources : Tracking third-party sources Builds : Issues related to CVS and builds Special Files : Devices, links and other non-regular files References # CVS Commands : CVS commands share some things Invoking CVS : Quick reference to CVS commands Administrative Files : Reference manual for the Administrative files Environment Variables : All environment variables which affect CVS Compatibility : Upgrading CVS versions Troubleshooting : Some tips when nothing works Credits : Some of the contributors to this manual Bugs : Dealing with bugs in CVS or this manual CVS Command List : Alphabetical list of all CVS commands Index : Index CVS Client/Server # These documents describe the client/server protocol used by CVS. It does not describe how to use or administer client/server CVS; for that, see the regular CVS manual . This is version 1.12.13 of the protocol specification\u2014See Introduction , for more on what this version number means. Introduction : What is CVS and what is the client/server protocol for? Goals : Basic design decisions, requirements, scope, etc. Connection and Authentication : Various ways to connect to the server Password scrambling : Scrambling used by pserver Protocol : Complete description of the protocol Protocol Notes : Possible enhancements, limitations, etc. of the protocol","title":"Home"},{"location":"#cvs-version-control-specification","text":"","title":"CVS Version Control Specification"},{"location":"#manual","text":"","title":"Manual"},{"location":"#how-to-use-and-administer-cvs-version-11213","text":"Overview : An introduction to CVS Repository : Where all your sources are stored Starting a new project : Starting a project with CVS Revisions : Numeric and symbolic names for revisions Branching and merging : Diverging/rejoining branches of development Recursive behavior : CVS descends directories Adding and removing : Adding/removing/renaming files/directories History browsing : Viewing the history of files in various ways","title":"How to Use and Administer CVS Version 1.12.13"},{"location":"#cvs-and-the-real-world","text":"Binary Files : CVS can handle binary files Multiple Developers : How CVS helps a group of Developers Revision Management : Policy questions for revision management Keyword Substitution : CVS can include the revision inside the file Tracking Sources : Tracking third-party sources Builds : Issues related to CVS and builds Special Files : Devices, links and other non-regular files","title":"CVS and the Real World"},{"location":"#references","text":"CVS Commands : CVS commands share some things Invoking CVS : Quick reference to CVS commands Administrative Files : Reference manual for the Administrative files Environment Variables : All environment variables which affect CVS Compatibility : Upgrading CVS versions Troubleshooting : Some tips when nothing works Credits : Some of the contributors to this manual Bugs : Dealing with bugs in CVS or this manual CVS Command List : Alphabetical list of all CVS commands Index : Index","title":"References"},{"location":"#cvs-clientserver","text":"These documents describe the client/server protocol used by CVS. It does not describe how to use or administer client/server CVS; for that, see the regular CVS manual . This is version 1.12.13 of the protocol specification\u2014See Introduction , for more on what this version number means. Introduction : What is CVS and what is the client/server protocol for? Goals : Basic design decisions, requirements, scope, etc. Connection and Authentication : Various ways to connect to the server Password scrambling : Scrambling used by pserver Protocol : Complete description of the protocol Protocol Notes : Possible enhancements, limitations, etc. of the protocol","title":"CVS Client/Server"},{"location":"license/","text":"GNU GENERAL PUBLIC LICENSE # Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble # The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS # 0. Definitions. # \"This License\" refers to version 3 of the GNU General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. 1. Source Code. # The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. 2. Basic Permissions. # All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. 3. Protecting Users' Legal Rights From Anti-Circumvention Law. # No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. 4. Conveying Verbatim Copies. # You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions. # You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. 6. Conveying Non-Source Forms. # You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. 7. Additional Terms. # \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. 8. Termination. # You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. 9. Acceptance Not Required for Having Copies. # You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. 10. Automatic Licensing of Downstream Recipients. # Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. 11. Patents. # A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. 12. No Surrender of Others' Freedom. # If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. 13. Use with the GNU Affero General Public License. # Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. 14. Revised Versions of this License. # The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. 15. Disclaimer of Warranty. # THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. Limitation of Liability. # IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 17. Interpretation of Sections 15 and 16. # If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs # If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 < one line to give the program ' s name and a brief idea of what it does.> Copyright ( C ) < year > < name of author > This program is free software : you can redistribute it and / or modify it under the terms of the GNU General Public License as published by the Free Software Foundation , either version 3 of the License , or ( at your option ) any later version . This program is distributed in the hope that it will be useful , but WITHOUT ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU General Public License for more details . You should have received a copy of the GNU General Public License along with this program . If not , see < https : // www . gnu . org / licenses /> . Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: 1 2 3 4 < program > Copyright ( C ) < year > < name of author > This program comes with ABSOLUTELY NO WARRANTY ; for details type `show w'. This is free software , and you are welcome to redistribute it under certain conditions ; type `show c' for details. The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\". You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see https://www.gnu.org/licenses/ . The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read https://www.gnu.org/licenses/why-not-lgpl.html .","title":"GNU Public License"},{"location":"license/#gnu-general-public-license","text":"Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.","title":"GNU GENERAL PUBLIC LICENSE"},{"location":"license/#preamble","text":"The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow.","title":"Preamble"},{"location":"license/#terms-and-conditions","text":"","title":"TERMS AND CONDITIONS"},{"location":"license/#0-definitions","text":"\"This License\" refers to version 3 of the GNU General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.","title":"0. Definitions."},{"location":"license/#1-source-code","text":"The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work.","title":"1. Source Code."},{"location":"license/#2-basic-permissions","text":"All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.","title":"2. Basic Permissions."},{"location":"license/#3-protecting-users-legal-rights-from-anti-circumvention-law","text":"No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.","title":"3. Protecting Users' Legal Rights From Anti-Circumvention Law."},{"location":"license/#4-conveying-verbatim-copies","text":"You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.","title":"4. Conveying Verbatim Copies."},{"location":"license/#5-conveying-modified-source-versions","text":"You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.","title":"5. Conveying Modified Source Versions."},{"location":"license/#6-conveying-non-source-forms","text":"You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.","title":"6. Conveying Non-Source Forms."},{"location":"license/#7-additional-terms","text":"\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.","title":"7. Additional Terms."},{"location":"license/#8-termination","text":"You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.","title":"8. Termination."},{"location":"license/#9-acceptance-not-required-for-having-copies","text":"You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.","title":"9. Acceptance Not Required for Having Copies."},{"location":"license/#10-automatic-licensing-of-downstream-recipients","text":"Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.","title":"10. Automatic Licensing of Downstream Recipients."},{"location":"license/#11-patents","text":"A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.","title":"11. Patents."},{"location":"license/#12-no-surrender-of-others-freedom","text":"If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.","title":"12. No Surrender of Others' Freedom."},{"location":"license/#13-use-with-the-gnu-affero-general-public-license","text":"Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.","title":"13. Use with the GNU Affero General Public License."},{"location":"license/#14-revised-versions-of-this-license","text":"The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.","title":"14. Revised Versions of this License."},{"location":"license/#15-disclaimer-of-warranty","text":"THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.","title":"15. Disclaimer of Warranty."},{"location":"license/#16-limitation-of-liability","text":"IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.","title":"16. Limitation of Liability."},{"location":"license/#17-interpretation-of-sections-15-and-16","text":"If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS","title":"17. Interpretation of Sections 15 and 16."},{"location":"license/#how-to-apply-these-terms-to-your-new-programs","text":"If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 < one line to give the program ' s name and a brief idea of what it does.> Copyright ( C ) < year > < name of author > This program is free software : you can redistribute it and / or modify it under the terms of the GNU General Public License as published by the Free Software Foundation , either version 3 of the License , or ( at your option ) any later version . This program is distributed in the hope that it will be useful , but WITHOUT ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU General Public License for more details . You should have received a copy of the GNU General Public License along with this program . If not , see < https : // www . gnu . org / licenses /> . Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: 1 2 3 4 < program > Copyright ( C ) < year > < name of author > This program comes with ABSOLUTELY NO WARRANTY ; for details type `show w'. This is free software , and you are welcome to redistribute it under certain conditions ; type `show c' for details. The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\". You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see https://www.gnu.org/licenses/ . The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read https://www.gnu.org/licenses/why-not-lgpl.html .","title":"How to Apply These Terms to Your New Programs"},{"location":"man-adding-removing/","text":"","title":"Adding and Removing"},{"location":"man-admin-files/","text":"","title":"Administrative Files"},{"location":"man-binary-files/","text":"","title":"Binary Files"},{"location":"man-branching-merging/","text":"","title":"Branching and Merging"},{"location":"man-bugs/","text":"","title":"Bugs"},{"location":"man-builds/","text":"","title":"Builds"},{"location":"man-compatibility/","text":"","title":"Compatibility"},{"location":"man-credits/","text":"","title":"Credits"},{"location":"man-cvs-command-list/","text":"","title":"CVS Command List"},{"location":"man-cvs-commands/","text":"","title":"CVS Commands"},{"location":"man-env/","text":"","title":"Environment Variables"},{"location":"man-history/","text":"","title":"History Browsing"},{"location":"man-index/","text":"","title":"Index"},{"location":"man-invoking-cvs/","text":"","title":"Invoking CVS"},{"location":"man-keyword-substitution/","text":"","title":"Keyword Substitution"},{"location":"man-mult-developers/","text":"","title":"Multiple Developers"},{"location":"man-new-project/","text":"","title":"Starting a New Project"},{"location":"man-overview/","text":"Overview # This chapter is for people who have never used cvs , and perhaps have never used version control software before. If you are already familiar with cvs and are just trying to learn a particular feature or remember a certain command, you can probably skip everything here. What is cvs ?: What you can do with cvs What is cvs not ?: Problems cvs doesn't try to solve A sample session : A tour of basic cvs usage What is cvs # cvs is a version control system. Using it, you can record the history of your source files. For example, bugs sometimes creep in when software is modified, and you might not detect the bug until a long time after you make the modification. With cvs , you can easily retrieve old versions to see exactly which change caused the bug. This can sometimes be a big help. You could of course save every version of every file you have ever created. This would however waste an enormous amount of disk space. cvs stores all the versions of a file in a single file in a clever way that only stores the differences between versions. cvs also helps you if you are part of a group of people working on the same project. It is all too easy to overwrite each others' changes unless you are extremely careful. Some editors, like gnu Emacs, try to make sure that two people never modify the same file at the same time. Unfortunately, if someone is using another editor, that safeguard will not work. cvs solves this problem by insulating the different developers from each other. Every developer works in his own directory, and cvs merges the work when each developer is done. cvs started out as a bunch of shell scripts written by Dick Grune, posted to the newsgroup comp.sources.unix in the volume 6 release of July, 1986. While no actual code from these shell scripts is present in the current version of cvs much of the cvs conflict resolution algorithms come from them. In April, 1989, Brian Berliner designed and coded cvs . Jeff Polk later helped Brian with the design of the cvs module and vendor branch support. You can get cvs in a variety of ways, including free download from the Internet. For more information on downloading cvs and other cvs topics, see: http://cvs.nongnu.org/ There is a mailing list, known as info-cvs@nongnu.org , devoted to cvs . To subscribe or unsubscribe write to info-cvs-request@nongnu.org . If you prefer a Usenet group, there is a one-way mirror (posts to the email list are usually sent to the news group, but not visa versa) of info-cvs@nongnu.org at news:gnu.cvs.help. The right Usenet group for posts is news:comp.software.config-mgmt which is for cvs discussions (along with other configuration management systems). In the future, it might be possible to create a comp.software.config-mgmt.cvs, but probably only if there is sufficient cvs traffic on news:comp.software.config-mgmt. You can also subscribe to the bug-cvs@nongnu.org mailing list, described in more detail in BUGS. To subscribe send mail to bug-cvs-request@nongnu.org . There is a two-way Usenet mirror (posts to the Usenet group are usually sent to the email list and visa versa) of bug-cvs@nongnu.org named news:gnu.cvs.bug. What is cvs not # cvs can do a lot of things for you, but it does not try to be everything for everyone. cvs is not a build system. Though the structure of your repository and modules file interact with your build system (e.g. Makefiles), they are essentially independent. cvs does not dictate how you build anything. It merely stores files for retrieval in a tree structure you devise. cvs does not dictate how to use disk space in the checked out working directories. If you write your Makefiles or scripts in every directory so they have to know the relative positions of everything else, you wind up requiring the entire repository to be checked out. If you modularize your work, and construct a build system that will share files (via links, mounts, VPATH in Makefiles, etc.), you can arrange your disk usage however you like. But you have to remember that any such system is a lot of work to construct and maintain. cvs does not address the issues involved. Of course, you should place the tools created to support such a build system (scripts, Makefiles, etc) under cvs . Figuring out what files need to be rebuilt when something changes is, again, something to be handled outside the scope of cvs . One traditional approach is to use make for building, and use some automated tool for generating the dependencies which make uses. See Builds , for more information on doing builds in conjunction with cvs . cvs is not a substitute for management. Your managers and project leaders are expected to talk to you frequently enough to make certain you are aware of schedules, merge points, branch names and release dates. If they don't, cvs can't help. cvs is an instrument for making sources dance to your tune. But you are the piper and the composer. No instrument plays itself or writes its own music. cvs is not a substitute for developer communication. When faced with conflicts within a single file, most developers manage to resolve them without too much effort. But a more general definition of \u201cconflict\u201d includes problems too difficult to solve without communication between developers. cvs cannot determine when simultaneous changes within a single file, or across a whole collection of files, will logically conflict with one another. Its concept of a conflict is purely textual, arising when two changes to the same base file are near enough to spook the merge (i.e. diff3) command. cvs does not claim to help at all in figuring out non-textual or distributed conflicts in program logic. For example: Say you change the arguments to function X defined in file A. At the same time, someone edits file B, adding new calls to function X using the old arguments. You are outside the realm of cvs 's competence. Acquire the habit of reading specs and talking to your peers. cvs does not have change control Change control refers to a number of things. First of all it can mean bug-tracking, that is being able to keep a database of reported bugs and the status of each one (is it fixed? in what release? has the bug submitter agreed that it is fixed?). For interfacing cvs to an external bug-tracking system, see the rcsinfo and verifymsg files (see Administrative files ). Another aspect of change control is keeping track of the fact that changes to several files were in fact changed together as one logical change. If you check in several files in a single cvs commit operation, cvs then forgets that those files were checked in together, and the fact that they have the same log message is the only thing tying them together. Keeping a gnu style ChangeLog can help somewhat. Another aspect of change control, in some systems, is the ability to keep track of the status of each change. Some changes have been written by a developer, others have been reviewed by a second developer, and so on. Generally, the way to do this with cvs is to generate a diff (using cvs diff or diff ) and email it to someone who can then apply it using the patch utility. This is very flexible, but depends on mechanisms outside cvs to make sure nothing falls through the cracks. cvs is not an automated testing program It should be possible to enforce mandatory use of a test suite using the commitinfo file. I haven't heard a lot about projects trying to do that or whether there are subtle gotchas, however. cvs does not have a built-in process model Some systems provide ways to ensure that changes or releases go through various steps, with various approvals as needed. Generally, one can accomplish this with cvs * but it might be a little more work. In some cases you'll want to use the commitinfo, loginfo, rcsinfo, or verifymsg files, to require that certain steps be performed before cvs * will allow a checkin. Also consider whether features such as branches and tags can be used to perform tasks such as doing work in a development tree and then merging certain changes over to a stable tree only once they have been proven. A Sample Session # As a way of introducing cvs , we'll go through a typical work-session using cvs . The first thing to understand is that cvs stores all files in a centralized repository (see Repository ); this section assumes that a repository is set up. Suppose you are working on a simple compiler. The source consists of a handful of C files and a Makefile. The compiler is called tc (Trivial Compiler), and the repository is set up so that there is a module called tc . Getting the source Committing your changes Cleaning up Viewing differences Getting the source # The first thing you must do is to get your own working copy of the source for `tc'. For this, you use the checkout command: 1 $ cvs checkout tc This will create a new directory called tc and populate it with the source files. 1 2 3 $ cd tc $ ls cvs Makefile backend.c driver.c frontend.c parser.c The cvs directory is used internally by cvs . Normally, you should not modify or remove any of the files in it. You start your favorite editor, hack away at backend.c, and a couple of hours later you have added an optimization pass to the compiler. A note to rcs and sccs users: There is no need to lock the files that you want to edit. See Multiple developers , for an explanation. Next: Cleaning up, Previous: Getting the source, Up: A sample session Committing your changes # When you have checked that the compiler is still compilable you decide to make a new version of backend.c . This will store your new backend.c in the repository and make it available to anyone else who is using that same repository. 1 $ cvs commit backend.c cvs starts an editor, to allow you to enter a log message. You type in \"Added an optimization pass.\" , save the temporary file, and exit the editor. The environment variable $CVSEDITOR determines which editor is started. If $CVSEDITOR is not set, then if the environment variable $EDITOR is set, it will be used. If both $CVSEDITOR and $EDITOR are not set then there is a default which will vary with your operating system, for example vi for unix or notepad for Windows NT/95. In addition, cvs checks the $VISUAL environment variable. Opinions vary on whether this behavior is desirable and whether future releases of cvs should check $VISUAL or ignore it. You will be OK either way if you make sure that $VISUAL is either unset or set to the same thing as $EDITOR . When cvs starts the editor, it includes a list of files which are modified. For the cvs client, this list is based on comparing the modification time of the file against the modification time that the file had when it was last gotten or updated. Therefore, if a file's modification time has changed but its contents have not, it will show up as modified. The simplest way to handle this is simply not to worry about it\u2014if you proceed with the commit cvs will detect that the contents are not modified and treat it as an unmodified file. The next update will clue cvs in to the fact that the file is unmodified, and it will reset its stored timestamp so that the file will not show up in future editor sessions. If you want to avoid starting an editor you can specify the log message on the command line using the -m flag instead, like this: 1 $ cvs commit -m \"Added an optimization pass\" backend.c Next: Viewing differences, Previous: Committing your changes, Up: A sample session Cleaning up # Before you turn to other tasks you decide to remove your working copy of tc. One acceptable way to do that is of course 1 2 $ cd .. $ rm -r tc but a better way is to use the release command (see release ): 1 2 3 4 5 6 7 $ cd .. $ cvs release -d tc M driver.c ? tc You have [ 1 ] altered files in this repository. Are you sure you want to release ( and delete ) directory 'tc' : n ** 'release' aborted by user choice. The release command checks that all your modifications have been committed. If history logging is enabled it also makes a note in the history file. See history file . When you use the -d flag with release , it also removes your working copy. In the example above, the release command wrote a couple of lines of output. ? tc means that the file tc is unknown to cvs . That is nothing to worry about: tc is the executable compiler, and it should not be stored in the repository. See cvsignore , for information about how to make that warning go away. See release output , for a complete explanation of all possible output from release . M driver.c is more serious. It means that the file driver.c has been modified since it was checked out. The release command always finishes by telling you how many modified files you have in your working copy of the sources, and then asks you for confirmation before deleting any files or making any note in the history file. You decide to play it safe and answer n <RET> when release asks for confirmation. Viewing differences # You do not remember modifying driver.c, so you want to see what has happened to that file. 1 2 $ cd tc $ cvs diff driver.c This command runs diff to compare the version of driver.c that you checked out with your working copy. When you see the output you remember that you added a command line option that enabled the optimization pass. You check it in, and release the module. 1 2 3 4 5 6 7 8 9 10 $ cvs commit -m \"Added an optimization pass\" driver.c Checking in driver.c ; /usr/local/cvsroot/tc/driver.c,v <-- driver.c new revision: 1 .2 ; previous revision: 1 .1 done $ cd .. $ cvs release -d tc ? tc You have [ 0 ] altered files in this repository. Are you sure you want to release ( and delete ) directory 'tc' : y","title":"Overview"},{"location":"man-overview/#overview","text":"This chapter is for people who have never used cvs , and perhaps have never used version control software before. If you are already familiar with cvs and are just trying to learn a particular feature or remember a certain command, you can probably skip everything here. What is cvs ?: What you can do with cvs What is cvs not ?: Problems cvs doesn't try to solve A sample session : A tour of basic cvs usage","title":"Overview"},{"location":"man-overview/#what-is-cvs","text":"cvs is a version control system. Using it, you can record the history of your source files. For example, bugs sometimes creep in when software is modified, and you might not detect the bug until a long time after you make the modification. With cvs , you can easily retrieve old versions to see exactly which change caused the bug. This can sometimes be a big help. You could of course save every version of every file you have ever created. This would however waste an enormous amount of disk space. cvs stores all the versions of a file in a single file in a clever way that only stores the differences between versions. cvs also helps you if you are part of a group of people working on the same project. It is all too easy to overwrite each others' changes unless you are extremely careful. Some editors, like gnu Emacs, try to make sure that two people never modify the same file at the same time. Unfortunately, if someone is using another editor, that safeguard will not work. cvs solves this problem by insulating the different developers from each other. Every developer works in his own directory, and cvs merges the work when each developer is done. cvs started out as a bunch of shell scripts written by Dick Grune, posted to the newsgroup comp.sources.unix in the volume 6 release of July, 1986. While no actual code from these shell scripts is present in the current version of cvs much of the cvs conflict resolution algorithms come from them. In April, 1989, Brian Berliner designed and coded cvs . Jeff Polk later helped Brian with the design of the cvs module and vendor branch support. You can get cvs in a variety of ways, including free download from the Internet. For more information on downloading cvs and other cvs topics, see: http://cvs.nongnu.org/ There is a mailing list, known as info-cvs@nongnu.org , devoted to cvs . To subscribe or unsubscribe write to info-cvs-request@nongnu.org . If you prefer a Usenet group, there is a one-way mirror (posts to the email list are usually sent to the news group, but not visa versa) of info-cvs@nongnu.org at news:gnu.cvs.help. The right Usenet group for posts is news:comp.software.config-mgmt which is for cvs discussions (along with other configuration management systems). In the future, it might be possible to create a comp.software.config-mgmt.cvs, but probably only if there is sufficient cvs traffic on news:comp.software.config-mgmt. You can also subscribe to the bug-cvs@nongnu.org mailing list, described in more detail in BUGS. To subscribe send mail to bug-cvs-request@nongnu.org . There is a two-way Usenet mirror (posts to the Usenet group are usually sent to the email list and visa versa) of bug-cvs@nongnu.org named news:gnu.cvs.bug.","title":"What is cvs"},{"location":"man-overview/#what-is-cvs-not","text":"cvs can do a lot of things for you, but it does not try to be everything for everyone. cvs is not a build system. Though the structure of your repository and modules file interact with your build system (e.g. Makefiles), they are essentially independent. cvs does not dictate how you build anything. It merely stores files for retrieval in a tree structure you devise. cvs does not dictate how to use disk space in the checked out working directories. If you write your Makefiles or scripts in every directory so they have to know the relative positions of everything else, you wind up requiring the entire repository to be checked out. If you modularize your work, and construct a build system that will share files (via links, mounts, VPATH in Makefiles, etc.), you can arrange your disk usage however you like. But you have to remember that any such system is a lot of work to construct and maintain. cvs does not address the issues involved. Of course, you should place the tools created to support such a build system (scripts, Makefiles, etc) under cvs . Figuring out what files need to be rebuilt when something changes is, again, something to be handled outside the scope of cvs . One traditional approach is to use make for building, and use some automated tool for generating the dependencies which make uses. See Builds , for more information on doing builds in conjunction with cvs . cvs is not a substitute for management. Your managers and project leaders are expected to talk to you frequently enough to make certain you are aware of schedules, merge points, branch names and release dates. If they don't, cvs can't help. cvs is an instrument for making sources dance to your tune. But you are the piper and the composer. No instrument plays itself or writes its own music. cvs is not a substitute for developer communication. When faced with conflicts within a single file, most developers manage to resolve them without too much effort. But a more general definition of \u201cconflict\u201d includes problems too difficult to solve without communication between developers. cvs cannot determine when simultaneous changes within a single file, or across a whole collection of files, will logically conflict with one another. Its concept of a conflict is purely textual, arising when two changes to the same base file are near enough to spook the merge (i.e. diff3) command. cvs does not claim to help at all in figuring out non-textual or distributed conflicts in program logic. For example: Say you change the arguments to function X defined in file A. At the same time, someone edits file B, adding new calls to function X using the old arguments. You are outside the realm of cvs 's competence. Acquire the habit of reading specs and talking to your peers. cvs does not have change control Change control refers to a number of things. First of all it can mean bug-tracking, that is being able to keep a database of reported bugs and the status of each one (is it fixed? in what release? has the bug submitter agreed that it is fixed?). For interfacing cvs to an external bug-tracking system, see the rcsinfo and verifymsg files (see Administrative files ). Another aspect of change control is keeping track of the fact that changes to several files were in fact changed together as one logical change. If you check in several files in a single cvs commit operation, cvs then forgets that those files were checked in together, and the fact that they have the same log message is the only thing tying them together. Keeping a gnu style ChangeLog can help somewhat. Another aspect of change control, in some systems, is the ability to keep track of the status of each change. Some changes have been written by a developer, others have been reviewed by a second developer, and so on. Generally, the way to do this with cvs is to generate a diff (using cvs diff or diff ) and email it to someone who can then apply it using the patch utility. This is very flexible, but depends on mechanisms outside cvs to make sure nothing falls through the cracks. cvs is not an automated testing program It should be possible to enforce mandatory use of a test suite using the commitinfo file. I haven't heard a lot about projects trying to do that or whether there are subtle gotchas, however. cvs does not have a built-in process model Some systems provide ways to ensure that changes or releases go through various steps, with various approvals as needed. Generally, one can accomplish this with cvs * but it might be a little more work. In some cases you'll want to use the commitinfo, loginfo, rcsinfo, or verifymsg files, to require that certain steps be performed before cvs * will allow a checkin. Also consider whether features such as branches and tags can be used to perform tasks such as doing work in a development tree and then merging certain changes over to a stable tree only once they have been proven.","title":"What is cvs not"},{"location":"man-overview/#a-sample-session","text":"As a way of introducing cvs , we'll go through a typical work-session using cvs . The first thing to understand is that cvs stores all files in a centralized repository (see Repository ); this section assumes that a repository is set up. Suppose you are working on a simple compiler. The source consists of a handful of C files and a Makefile. The compiler is called tc (Trivial Compiler), and the repository is set up so that there is a module called tc . Getting the source Committing your changes Cleaning up Viewing differences","title":"A Sample Session"},{"location":"man-overview/#getting-the-source","text":"The first thing you must do is to get your own working copy of the source for `tc'. For this, you use the checkout command: 1 $ cvs checkout tc This will create a new directory called tc and populate it with the source files. 1 2 3 $ cd tc $ ls cvs Makefile backend.c driver.c frontend.c parser.c The cvs directory is used internally by cvs . Normally, you should not modify or remove any of the files in it. You start your favorite editor, hack away at backend.c, and a couple of hours later you have added an optimization pass to the compiler. A note to rcs and sccs users: There is no need to lock the files that you want to edit. See Multiple developers , for an explanation. Next: Cleaning up, Previous: Getting the source, Up: A sample session","title":"Getting the source"},{"location":"man-overview/#committing-your-changes","text":"When you have checked that the compiler is still compilable you decide to make a new version of backend.c . This will store your new backend.c in the repository and make it available to anyone else who is using that same repository. 1 $ cvs commit backend.c cvs starts an editor, to allow you to enter a log message. You type in \"Added an optimization pass.\" , save the temporary file, and exit the editor. The environment variable $CVSEDITOR determines which editor is started. If $CVSEDITOR is not set, then if the environment variable $EDITOR is set, it will be used. If both $CVSEDITOR and $EDITOR are not set then there is a default which will vary with your operating system, for example vi for unix or notepad for Windows NT/95. In addition, cvs checks the $VISUAL environment variable. Opinions vary on whether this behavior is desirable and whether future releases of cvs should check $VISUAL or ignore it. You will be OK either way if you make sure that $VISUAL is either unset or set to the same thing as $EDITOR . When cvs starts the editor, it includes a list of files which are modified. For the cvs client, this list is based on comparing the modification time of the file against the modification time that the file had when it was last gotten or updated. Therefore, if a file's modification time has changed but its contents have not, it will show up as modified. The simplest way to handle this is simply not to worry about it\u2014if you proceed with the commit cvs will detect that the contents are not modified and treat it as an unmodified file. The next update will clue cvs in to the fact that the file is unmodified, and it will reset its stored timestamp so that the file will not show up in future editor sessions. If you want to avoid starting an editor you can specify the log message on the command line using the -m flag instead, like this: 1 $ cvs commit -m \"Added an optimization pass\" backend.c Next: Viewing differences, Previous: Committing your changes, Up: A sample session","title":"Committing your changes"},{"location":"man-overview/#cleaning-up","text":"Before you turn to other tasks you decide to remove your working copy of tc. One acceptable way to do that is of course 1 2 $ cd .. $ rm -r tc but a better way is to use the release command (see release ): 1 2 3 4 5 6 7 $ cd .. $ cvs release -d tc M driver.c ? tc You have [ 1 ] altered files in this repository. Are you sure you want to release ( and delete ) directory 'tc' : n ** 'release' aborted by user choice. The release command checks that all your modifications have been committed. If history logging is enabled it also makes a note in the history file. See history file . When you use the -d flag with release , it also removes your working copy. In the example above, the release command wrote a couple of lines of output. ? tc means that the file tc is unknown to cvs . That is nothing to worry about: tc is the executable compiler, and it should not be stored in the repository. See cvsignore , for information about how to make that warning go away. See release output , for a complete explanation of all possible output from release . M driver.c is more serious. It means that the file driver.c has been modified since it was checked out. The release command always finishes by telling you how many modified files you have in your working copy of the sources, and then asks you for confirmation before deleting any files or making any note in the history file. You decide to play it safe and answer n <RET> when release asks for confirmation.","title":"Cleaning up"},{"location":"man-overview/#viewing-differences","text":"You do not remember modifying driver.c, so you want to see what has happened to that file. 1 2 $ cd tc $ cvs diff driver.c This command runs diff to compare the version of driver.c that you checked out with your working copy. When you see the output you remember that you added a command line option that enabled the optimization pass. You check it in, and release the module. 1 2 3 4 5 6 7 8 9 10 $ cvs commit -m \"Added an optimization pass\" driver.c Checking in driver.c ; /usr/local/cvsroot/tc/driver.c,v <-- driver.c new revision: 1 .2 ; previous revision: 1 .1 done $ cd .. $ cvs release -d tc ? tc You have [ 0 ] altered files in this repository. Are you sure you want to release ( and delete ) directory 'tc' : y","title":"Viewing differences"},{"location":"man-recursive/","text":"","title":"Recursive Behavior"},{"location":"man-repository/","text":"","title":"Repository"},{"location":"man-revision-management/","text":"","title":"Revision Management"},{"location":"man-revisions/","text":"","title":"Revisions"},{"location":"man-special-files/","text":"","title":"Special Files"},{"location":"man-tracking-sources/","text":"","title":"Tracking Sources"},{"location":"man-troubleshooting/","text":"","title":"Troubleshooting"},{"location":"server-conn-auth/","text":"How to Connect to and Authenticate Oneself to the CVS Server # Connection and authentication occurs before the CVS protocol itself is started. There are several ways to connect. server # If the client has a way to execute commands on the server, and provide input to the commands and output from them, then it can connect that way. This could be the usual rsh (port 514) protocol, Kerberos rsh, SSH, or any similar mechanism. The client may allow the user to specify the name of the server program; the default is cvs . It is invoked with one argument, server . Once it invokes the server, the client proceeds to start the cvs protocol. kserver # The kerberized server listens on a port (in the current implementation, by having inetd call cvs kserver ) which defaults to 1999. The client connects, sends the usual kerberos authentication information, and then starts the cvs protocol. Note Port 1999 is officially registered for another use, and in any event one cannot register more than one port for CVS, so GSS-API (see below) is recommended instead of kserver as a way to support kerberos. pserver # The name pserver is somewhat confusing. It refers to both a generic framework which allows the CVS protocol to support several authentication mechanisms, and a name for a specific mechanism which transfers a username and a cleartext password. Servers need not support all mechanisms, and in fact servers will typically want to support only those mechanisms which meet the relevant security needs. The pserver server listens on a port (in the current implementation, by having inetd call cvs pserver ) which defaults to 2401 (this port is officially registered). The client connects, and sends the following: the string BEGIN AUTH REQUEST , a linefeed, the cvs root, a linefeed, the username, a linefeed, the password trivially encoded (see Password scrambling), a linefeed, the string END AUTH REQUEST , and a linefeed. The client must send the identical string for cvs root both here and later in the Root request of the cvs protocol itself. Servers are encouraged to enforce this restriction. The possible server responses (each of which is followed by a linefeed) are the following. Note that although there is a small similarity between this authentication protocol and the cvs protocol, they are separate. I LOVE YOU The authentication is successful. The client proceeds with the cvs protocol itself. I HATE YOU The authentication fails. After sending this response, the server may close the connection. It is up to the server to decide whether to give this response, which is generic, or a more specific response using E and/or error . E text Provide a message for the user. After this reponse, the authentication protocol continues with another response. Typically the server will provide a series of E responses followed by error . Compatibility Note cvs 1.9.10 and older clients will print unrecognized auth response and text , and then exit, upon receiving this response. error code text The authentication fails. After sending this response, the server may close the connection. The code is a code describing why it failed, intended for computer consumption. The only code currently defined is 0 which is nonspecific, but clients must silently treat any unrecognized codes as nonspecific. The text should be supplied to the user. Compatibility Note cvs 1.9.10 and older clients will print unrecognized auth response and text , and then exit, upon receiving this response. Note text for this response, or the text in an E response, is not designed for machine parsing. More vigorous use of code, or future extensions, will be needed to prove a cleaner machine-parseable indication of what the error was. If the client wishes to merely authenticate without starting the cvs protocol, the procedure is the same, except: BEGIN AUTH REQUEST is replaced with BEGIN VERIFICATION REQUEST , END AUTH REQUEST is replaced with END VERIFICATION REQUEST , Upon receipt of I LOVE YOU the connection is closed instead of continuing. Another mechanism is GSSAPI authentication. GSSAPI is a generic interface to security services such as kerberos. GSSAPI is specified in RFC2078 (GSSAPI version 2) and RFC1508 (GSSAPI version 1); we are not aware of differences between the two which affect the protocol in incompatible ways, so we make no attempt to specify one version or the other. The procedure here is to start with BEGIN GSSAPI REQUEST . GSSAPI authentication information is then exchanged between the client and the server. Each packet of information consists of a two byte big endian length, followed by that many bytes of data. After the GSSAPI authentication is complete, the server continues with the responses described above ( I LOVE YOU , etc.). Future Possibilities # There are nearly an unlimited number of ways to connect and authenticate. One might want to allow access based on IP address (similar to the usual rsh protocol but with different/no restrictions on ports < 1024), to adopt mechanisms such as Pluggable Authentication Modules (PAM), to allow users to run their own servers under their own usernames without root access, or any number of other possibilities. The way to add future mechanisms, for the most part, should be to continue to use port 2401, but to use different strings in place of BEGIN AUTH REQUEST .","title":"Connection and Authentication"},{"location":"server-conn-auth/#how-to-connect-to-and-authenticate-oneself-to-the-cvs-server","text":"Connection and authentication occurs before the CVS protocol itself is started. There are several ways to connect.","title":"How to Connect to and Authenticate Oneself to the CVS Server"},{"location":"server-conn-auth/#server","text":"If the client has a way to execute commands on the server, and provide input to the commands and output from them, then it can connect that way. This could be the usual rsh (port 514) protocol, Kerberos rsh, SSH, or any similar mechanism. The client may allow the user to specify the name of the server program; the default is cvs . It is invoked with one argument, server . Once it invokes the server, the client proceeds to start the cvs protocol.","title":"server"},{"location":"server-conn-auth/#kserver","text":"The kerberized server listens on a port (in the current implementation, by having inetd call cvs kserver ) which defaults to 1999. The client connects, sends the usual kerberos authentication information, and then starts the cvs protocol. Note Port 1999 is officially registered for another use, and in any event one cannot register more than one port for CVS, so GSS-API (see below) is recommended instead of kserver as a way to support kerberos.","title":"kserver"},{"location":"server-conn-auth/#pserver","text":"The name pserver is somewhat confusing. It refers to both a generic framework which allows the CVS protocol to support several authentication mechanisms, and a name for a specific mechanism which transfers a username and a cleartext password. Servers need not support all mechanisms, and in fact servers will typically want to support only those mechanisms which meet the relevant security needs. The pserver server listens on a port (in the current implementation, by having inetd call cvs pserver ) which defaults to 2401 (this port is officially registered). The client connects, and sends the following: the string BEGIN AUTH REQUEST , a linefeed, the cvs root, a linefeed, the username, a linefeed, the password trivially encoded (see Password scrambling), a linefeed, the string END AUTH REQUEST , and a linefeed. The client must send the identical string for cvs root both here and later in the Root request of the cvs protocol itself. Servers are encouraged to enforce this restriction. The possible server responses (each of which is followed by a linefeed) are the following. Note that although there is a small similarity between this authentication protocol and the cvs protocol, they are separate. I LOVE YOU The authentication is successful. The client proceeds with the cvs protocol itself. I HATE YOU The authentication fails. After sending this response, the server may close the connection. It is up to the server to decide whether to give this response, which is generic, or a more specific response using E and/or error . E text Provide a message for the user. After this reponse, the authentication protocol continues with another response. Typically the server will provide a series of E responses followed by error . Compatibility Note cvs 1.9.10 and older clients will print unrecognized auth response and text , and then exit, upon receiving this response. error code text The authentication fails. After sending this response, the server may close the connection. The code is a code describing why it failed, intended for computer consumption. The only code currently defined is 0 which is nonspecific, but clients must silently treat any unrecognized codes as nonspecific. The text should be supplied to the user. Compatibility Note cvs 1.9.10 and older clients will print unrecognized auth response and text , and then exit, upon receiving this response. Note text for this response, or the text in an E response, is not designed for machine parsing. More vigorous use of code, or future extensions, will be needed to prove a cleaner machine-parseable indication of what the error was. If the client wishes to merely authenticate without starting the cvs protocol, the procedure is the same, except: BEGIN AUTH REQUEST is replaced with BEGIN VERIFICATION REQUEST , END AUTH REQUEST is replaced with END VERIFICATION REQUEST , Upon receipt of I LOVE YOU the connection is closed instead of continuing. Another mechanism is GSSAPI authentication. GSSAPI is a generic interface to security services such as kerberos. GSSAPI is specified in RFC2078 (GSSAPI version 2) and RFC1508 (GSSAPI version 1); we are not aware of differences between the two which affect the protocol in incompatible ways, so we make no attempt to specify one version or the other. The procedure here is to start with BEGIN GSSAPI REQUEST . GSSAPI authentication information is then exchanged between the client and the server. Each packet of information consists of a two byte big endian length, followed by that many bytes of data. After the GSSAPI authentication is complete, the server continues with the responses described above ( I LOVE YOU , etc.).","title":"pserver"},{"location":"server-conn-auth/#future-possibilities","text":"There are nearly an unlimited number of ways to connect and authenticate. One might want to allow access based on IP address (similar to the usual rsh protocol but with different/no restrictions on ports < 1024), to adopt mechanisms such as Pluggable Authentication Modules (PAM), to allow users to run their own servers under their own usernames without root access, or any number of other possibilities. The way to add future mechanisms, for the most part, should be to continue to use port 2401, but to use different strings in place of BEGIN AUTH REQUEST .","title":"Future Possibilities"},{"location":"server-goals/","text":"Goals # Do not assume any access to the repository other than via this protocol. It does not depend on NFS, rdist, etc. Providing a reliable transport is outside this protocol. The protocol expects a reliable transport that is transparent (that is, there is no translation of characters, including characters such as linefeeds or carriage returns), and can transmit all 256 octets (for example for proper handling of binary files, compression, and encryption). The encoding of characters specified by the protocol (the names of requests and so on) is the invariant ISO 646 character set (a subset of most popular character sets including ASCII and others). For more details on running the protocol over the TCP reliable transport, see Connection and Authentication . Security and authentication are handled outside this protocol (but see below about cvs kserver and cvs pserver ). The protocol makes it possible for updates to be atomic with respect to checkins; that is if someone commits changes to several files in one cvs command, then an update by someone else would either get all the changes, or none of them. The current cvs server can't do this, but that isn't the protocol's fault. The protocol is, with a few exceptions, transaction-based. That is, the client sends all its requests (without waiting for server responses), and then waits for the server to send back all responses (without waiting for further client requests). This has the advantage of minimizing network turnarounds and the disadvantage of sometimes transferring more data than would be necessary if there were a richer interaction. Another, more subtle, advantage is that there is no need for the protocol to provide locking for features such as making checkins atomic with respect to updates. Any such locking can be handled entirely by the server. A good server implementation (such as the current cvs server) will make sure that it does not have any such locks in place whenever it is waiting for communication with the client; this prevents one client on a slow or flaky network from interfering with the work of others. It is a general design goal to provide only one way to do a given operation (where possible). For example, implementations have no choice about whether to terminate lines with linefeeds or some other character(s), and request and response names are case-sensitive. This is to enhance interoperability. If a protocol allows more than one way to do something, it is all too easy for some implementations to support only some of them (perhaps accidentally).","title":"Goals"},{"location":"server-goals/#goals","text":"Do not assume any access to the repository other than via this protocol. It does not depend on NFS, rdist, etc. Providing a reliable transport is outside this protocol. The protocol expects a reliable transport that is transparent (that is, there is no translation of characters, including characters such as linefeeds or carriage returns), and can transmit all 256 octets (for example for proper handling of binary files, compression, and encryption). The encoding of characters specified by the protocol (the names of requests and so on) is the invariant ISO 646 character set (a subset of most popular character sets including ASCII and others). For more details on running the protocol over the TCP reliable transport, see Connection and Authentication . Security and authentication are handled outside this protocol (but see below about cvs kserver and cvs pserver ). The protocol makes it possible for updates to be atomic with respect to checkins; that is if someone commits changes to several files in one cvs command, then an update by someone else would either get all the changes, or none of them. The current cvs server can't do this, but that isn't the protocol's fault. The protocol is, with a few exceptions, transaction-based. That is, the client sends all its requests (without waiting for server responses), and then waits for the server to send back all responses (without waiting for further client requests). This has the advantage of minimizing network turnarounds and the disadvantage of sometimes transferring more data than would be necessary if there were a richer interaction. Another, more subtle, advantage is that there is no need for the protocol to provide locking for features such as making checkins atomic with respect to updates. Any such locking can be handled entirely by the server. A good server implementation (such as the current cvs server) will make sure that it does not have any such locks in place whenever it is waiting for communication with the client; this prevents one client on a slow or flaky network from interfering with the work of others. It is a general design goal to provide only one way to do a given operation (where possible). For example, implementations have no choice about whether to terminate lines with linefeeds or some other character(s), and request and response names are case-sensitive. This is to enhance interoperability. If a protocol allows more than one way to do something, it is all too easy for some implementations to support only some of them (perhaps accidentally).","title":"Goals"},{"location":"server-introduction/","text":"Introduction # CVS is a version control system (with some additional configuration management functionality). It maintains a central repository which stores files (often source code), including past versions, information about who modified them and when, and so on. People who wish to look at or modify those files, known as developers, use CVS to check out a working directory from the repository, to check in new versions of files to the repository, and other operations such as viewing the modification history of a file. If developers are connected to the repository by a network, particularly a slow or flaky one, the most efficient way to use the network is with the CVS-specific protocol described in this document. Developers, using the machine on which they store their working directory, run the CVS client program. To perform operations which cannot be done locally, it connects to the CVS server program, which maintains the repository. For more information on how to connect see Connection and Authentication . This document describes the CVS protocol. Unfortunately, it does not yet completely document one aspect of the protocol\u2014the detailed operation of each CVS command and option\u2014and one must look at the CVS user documentation, cvs.texinfo , for that information. The protocol is non-proprietary (anyone who wants to is encouraged to implement it) and an implementation, known as CVS , is available under the GNU General Public License. The CVS distribution, containing this implementation, cvs.texinfo , and a copy (possibly more or less up to date than what you are reading now) of this document, cvsclient.texi , can be found at the usual GNU FTP sites, with a filename such as cvs- version .tar.gz . This is version 1.12.13 of the protocol specification. This version number is intended only to aid in distinguishing different versions of this specification. Although the specification is currently maintained in conjunction with the CVS implementation, and carries the same version number, it also intends to document what is involved with interoperating with other implementations (such as other versions of CVS); see Requirements . This version number should not be used by clients or servers to determine what variant of the protocol to speak; they should instead use the valid-requests and Valid-responses mechanism (see Protocol ), which is more flexible.","title":"Introduction"},{"location":"server-introduction/#introduction","text":"CVS is a version control system (with some additional configuration management functionality). It maintains a central repository which stores files (often source code), including past versions, information about who modified them and when, and so on. People who wish to look at or modify those files, known as developers, use CVS to check out a working directory from the repository, to check in new versions of files to the repository, and other operations such as viewing the modification history of a file. If developers are connected to the repository by a network, particularly a slow or flaky one, the most efficient way to use the network is with the CVS-specific protocol described in this document. Developers, using the machine on which they store their working directory, run the CVS client program. To perform operations which cannot be done locally, it connects to the CVS server program, which maintains the repository. For more information on how to connect see Connection and Authentication . This document describes the CVS protocol. Unfortunately, it does not yet completely document one aspect of the protocol\u2014the detailed operation of each CVS command and option\u2014and one must look at the CVS user documentation, cvs.texinfo , for that information. The protocol is non-proprietary (anyone who wants to is encouraged to implement it) and an implementation, known as CVS , is available under the GNU General Public License. The CVS distribution, containing this implementation, cvs.texinfo , and a copy (possibly more or less up to date than what you are reading now) of this document, cvsclient.texi , can be found at the usual GNU FTP sites, with a filename such as cvs- version .tar.gz . This is version 1.12.13 of the protocol specification. This version number is intended only to aid in distinguishing different versions of this specification. Although the specification is currently maintained in conjunction with the CVS implementation, and carries the same version number, it also intends to document what is involved with interoperating with other implementations (such as other versions of CVS); see Requirements . This version number should not be used by clients or servers to determine what variant of the protocol to speak; they should instead use the valid-requests and Valid-responses mechanism (see Protocol ), which is more flexible.","title":"Introduction"},{"location":"server-password/","text":"Password Scrambling Algorithm # The pserver authentication protocol, as described in Connection and Authentication , trivially encodes the passwords. This is only to prevent inadvertent compromise; it provides no protection against even a relatively unsophisticated attacker. For comparison, HTTP Basic Authentication (as described in RFC2068) uses BASE64 for a similar purpose. CVS uses its own algorithm, described here. The scrambled password starts with A , which serves to identify the scrambling algorithm in use. After that follows a single octet for each character in the password, according to a fixed encoding. The values are shown here, with the encoded values in decimal. Control characters, space, and characters outside the invariant ISO 646 character set are not shown; such characters are not recommended for use in passwords. There is a long discussion of character set issues in Protocol Notes . IN OUT DEC HEX CHAR \u2192 DEC HEX CHAR 33 21 ! \u2192 120 78 x 34 22 \" \u2192 53 35 5 37 25 % \u2192 109 6D m 38 26 & \u2192 72 48 H 39 27 ' \u2192 108 6C l 40 28 ( \u2192 70 46 F 41 29 ) \u2192 64 40 @ 42 2A * \u2192 76 4C L 43 2B + \u2192 67 43 C 44 2C , \u2192 116 74 t 45 2D - \u2192 74 4A J 46 2E . \u2192 68 44 D 47 2F / \u2192 87 57 W 48 30 0 \u2192 111 6F o 49 31 1 \u2192 52 34 4 50 32 2 \u2192 75 4B K 51 33 3 \u2192 119 77 w 52 34 4 \u2192 49 31 1 53 35 5 \u2192 34 22 \" 54 36 6 \u2192 82 52 R 55 37 7 \u2192 81 51 Q 56 38 8 \u2192 95 5F _ 57 39 9 \u2192 65 41 A 58 3A : \u2192 112 70 p 59 3B ; \u2192 86 56 V 60 3C < \u2192 118 76 v 61 3D = \u2192 110 6E n 62 3E > \u2192 122 7A z 63 3F ? \u2192 105 69 i 65 41 A \u2192 57 39 9 66 42 B \u2192 83 53 S 67 43 C \u2192 43 2B + 68 44 D \u2192 46 2E . 69 45 E \u2192 102 66 f 70 46 F \u2192 40 28 ( 71 47 G \u2192 89 59 Y 72 48 H \u2192 38 26 & 73 49 I \u2192 103 67 g 74 4A J \u2192 45 2D - 75 4B K \u2192 50 32 2 76 4C L \u2192 42 2A * 77 4D M \u2192 123 7B { 78 4E N \u2192 91 5B [ 79 4F O \u2192 35 23 # 80 50 P \u2192 125 7D } 81 51 Q \u2192 55 37 7 82 52 R \u2192 54 36 6 83 53 S \u2192 66 42 B 84 54 T \u2192 124 7C 85 55 U \u2192 126 7E ~ 86 56 V \u2192 59 3B ; 87 57 W \u2192 47 2F / 88 58 X \u2192 92 5C \\ 89 59 Y \u2192 71 47 G 90 5A Z \u2192 115 73 s 95 5F _ \u2192 56 38 8 97 61 a \u2192 121 79 y 98 62 b \u2192 117 75 u 99 63 c \u2192 104 68 h 100 64 d \u2192 101 65 e 101 65 e \u2192 100 64 d 102 66 f \u2192 69 45 E 103 67 g \u2192 73 49 I 104 68 h \u2192 99 63 c 105 69 i \u2192 63 3F ? 106 6A j \u2192 94 5E ^ 107 6B k \u2192 93 5D ] 108 6C l \u2192 39 27 ' 109 6D m \u2192 37 25 % 110 6E n \u2192 61 3D = 111 6F o \u2192 48 30 0 112 70 p \u2192 58 3A : 113 71 q \u2192 113 71 q 114 72 r \u2192 32 20 115 73 s \u2192 90 5A Z 116 74 t \u2192 44 2C , 117 75 u \u2192 98 62 b 118 76 v \u2192 60 3C < 119 77 w \u2192 51 33 3 120 78 x \u2192 33 21 ! 121 79 y \u2192 97 61 a 122 7A z \u2192 62 3E >","title":"Password Scrambling"},{"location":"server-password/#password-scrambling-algorithm","text":"The pserver authentication protocol, as described in Connection and Authentication , trivially encodes the passwords. This is only to prevent inadvertent compromise; it provides no protection against even a relatively unsophisticated attacker. For comparison, HTTP Basic Authentication (as described in RFC2068) uses BASE64 for a similar purpose. CVS uses its own algorithm, described here. The scrambled password starts with A , which serves to identify the scrambling algorithm in use. After that follows a single octet for each character in the password, according to a fixed encoding. The values are shown here, with the encoded values in decimal. Control characters, space, and characters outside the invariant ISO 646 character set are not shown; such characters are not recommended for use in passwords. There is a long discussion of character set issues in Protocol Notes . IN OUT DEC HEX CHAR \u2192 DEC HEX CHAR 33 21 ! \u2192 120 78 x 34 22 \" \u2192 53 35 5 37 25 % \u2192 109 6D m 38 26 & \u2192 72 48 H 39 27 ' \u2192 108 6C l 40 28 ( \u2192 70 46 F 41 29 ) \u2192 64 40 @ 42 2A * \u2192 76 4C L 43 2B + \u2192 67 43 C 44 2C , \u2192 116 74 t 45 2D - \u2192 74 4A J 46 2E . \u2192 68 44 D 47 2F / \u2192 87 57 W 48 30 0 \u2192 111 6F o 49 31 1 \u2192 52 34 4 50 32 2 \u2192 75 4B K 51 33 3 \u2192 119 77 w 52 34 4 \u2192 49 31 1 53 35 5 \u2192 34 22 \" 54 36 6 \u2192 82 52 R 55 37 7 \u2192 81 51 Q 56 38 8 \u2192 95 5F _ 57 39 9 \u2192 65 41 A 58 3A : \u2192 112 70 p 59 3B ; \u2192 86 56 V 60 3C < \u2192 118 76 v 61 3D = \u2192 110 6E n 62 3E > \u2192 122 7A z 63 3F ? \u2192 105 69 i 65 41 A \u2192 57 39 9 66 42 B \u2192 83 53 S 67 43 C \u2192 43 2B + 68 44 D \u2192 46 2E . 69 45 E \u2192 102 66 f 70 46 F \u2192 40 28 ( 71 47 G \u2192 89 59 Y 72 48 H \u2192 38 26 & 73 49 I \u2192 103 67 g 74 4A J \u2192 45 2D - 75 4B K \u2192 50 32 2 76 4C L \u2192 42 2A * 77 4D M \u2192 123 7B { 78 4E N \u2192 91 5B [ 79 4F O \u2192 35 23 # 80 50 P \u2192 125 7D } 81 51 Q \u2192 55 37 7 82 52 R \u2192 54 36 6 83 53 S \u2192 66 42 B 84 54 T \u2192 124 7C 85 55 U \u2192 126 7E ~ 86 56 V \u2192 59 3B ; 87 57 W \u2192 47 2F / 88 58 X \u2192 92 5C \\ 89 59 Y \u2192 71 47 G 90 5A Z \u2192 115 73 s 95 5F _ \u2192 56 38 8 97 61 a \u2192 121 79 y 98 62 b \u2192 117 75 u 99 63 c \u2192 104 68 h 100 64 d \u2192 101 65 e 101 65 e \u2192 100 64 d 102 66 f \u2192 69 45 E 103 67 g \u2192 73 49 I 104 68 h \u2192 99 63 c 105 69 i \u2192 63 3F ? 106 6A j \u2192 94 5E ^ 107 6B k \u2192 93 5D ] 108 6C l \u2192 39 27 ' 109 6D m \u2192 37 25 % 110 6E n \u2192 61 3D = 111 6F o \u2192 48 30 0 112 70 p \u2192 58 3A : 113 71 q \u2192 113 71 q 114 72 r \u2192 32 20 115 73 s \u2192 90 5A Z 116 74 t \u2192 44 2C , 117 75 u \u2192 98 62 b 118 76 v \u2192 60 3C < 119 77 w \u2192 51 33 3 120 78 x \u2192 33 21 ! 121 79 y \u2192 97 61 a 122 7A z \u2192 62 3E >","title":"Password Scrambling Algorithm"},{"location":"server-protocol-notes/","text":"","title":"Protocol Notes"},{"location":"server-protocol/","text":"The CVS Client/Server Protocol # In the following, \\n refers to a linefeed and \\t refers to a horizontal tab; requests are what the client sends and responses are what the server sends. In general, the connection is governed by the client, the server does not send responses without first receiving requests to do so; see Response Intro for more details of this convention. It is typical, early in the connection, for the client to transmit a valid-responses request, containing all the responses it supports, followed by a valid-requests request, which elicits from the server a valid-requests response containing all the requests it understands. In this way, the client and server each find out what the other supports before exchanging large amounts of data (such as file contents). General protocol conventions : Entries Lines : Transmitting RCS data File Modes : Read, write, execute, and possibly more... Filenames : Conventions regarding filenames File transmissions : How file contents are transmitted Strings: Strings in various requests and responses Dates: Times and dates The protocol itself : Request intro: General conventions relating to requests Requests: List of requests Response intro: General conventions relating to responses Response pathnames: The \"pathname\" in responses Responses: List of responses Text tags: More details about the MT response An example session, and some further observations : Example: A conversation between client and server Requirements: Things not to omit from an implementation Obsolete: Former protocol features Entries Lines # Entries lines are transmitted as: 1 / name / version / conflict / options / tag_or_date tag_or_date is either T tag or D date or empty. If it is followed by a slash, anything after the slash shall be silently ignored. version can be empty, or start with 0 or - , for no user file, new user file, or user file to be removed, respectively. conflict , if it starts with + , indicates that the file had conflicts in it. The rest of conflict is = if the timestamp matches the file, or anything else if it doesn't. If conflict does not start with a + , it is silently ignored. options signifies the keyword expansion options (for example -ko ). In an Entry request, this indicates the options that were specified with the file from the previous file updating response (see Response Intro , for a list of file updating responses); if the client is specifying the -k or -A option to update , then it is the server which figures out what overrides what. File Modes # A mode is any number of repetitions of 1 mode-type = data separated by , . mode-type is an identifier composed of alphanumeric characters. Currently specified: u for user, g for group, o for other (see below for discussion of whether these have their POSIX meaning or are more loose). Unrecognized values of mode-type are silently ignored. data consists of any data not containing , , \\0 or \\n . For u , g , and o mode types, data consists of alphanumeric characters, where r means read, w means write, x means execute, and unrecognized letters are silently ignored. The two most obvious ways in which the mode matters are: Is it writeable? This is used by the developer communication features, and is implemented even on OS/2 (and could be implemented on DOS), whose notion of mode is limited to a readonly bit. Is it executable? Unix CVS users need CVS to store this setting (for shell scripts and the like). The current CVS implementation on unix does a little bit more than just maintain these two settings, but it doesn't really have a nice general facility to store or version control the mode, even on unix, much less across operating systems with diverse protection features. So all the ins and outs of what the mode means across operating systems haven't really been worked out (e.g. should the VMS port use ACLs to get POSIX semantics for groups?). Conventions Regarding Transmission of File Names # In most contexts, / is used to separate directory and file names in filenames, and any use of other conventions (for example, that the user might type on the command line) is converted to that form. The only exceptions might be a few cases in which the server provides a magic cookie which the client then repeats verbatim, but as the server has not yet been ported beyond unix, the two rules provide the same answer (and what to do if future server ports are operating on a repository like e:/foo or CVS_ROOT:[FOO.BAR] has not been carefully thought out). Characters outside the invariant ISO 646 character set should be avoided in filenames. This restriction may need to be relaxed to allow for characters such as [ and ] (see above about non-unix servers); this has not been carefully considered (and currently implementations probably use whatever character sets that the operating systems they are running on allow, and/or that users specify). Of course the most portable practice is to restrict oneself further, to the POSIX portable filename character set as specified in POSIX.1. File Transmissions # File contents (noted below as file transmission) can be sent in one of two forms. The simpler form is a number of bytes, followed by a linefeed, followed by the specified number of bytes of file contents. These are the entire contents of the specified file. Second, if both client and server support gzip-file-contents', a z' may precede the length, and the file contents' sent are actually compressed with gzip' (RFC1952/1951) compression. The length specified is that of the compressed version of the file. In neither case are the file content followed by any additional data. The transmission of a file will end with a linefeed iff that file (or its compressed form) ends with a linefeed. The encoding of file contents depends on the value for the -k' option. If the file is binary (as specified by the -kb' option in the appropriate place), then it is just a certain number of octets, and the protocol contributes nothing towards determining the encoding (using the file name is one widespread, if not universally popular, mechanism). If the file is text (not binary), then the file is sent as a series of lines, separated by linefeeds. If the keyword expansion is set to something other than -ko', then it is expected that the file conform to the RCS expectations regarding keyword expansion\u2014in particular, that it is in a character set such as ASCII in which 0x24 is a dollar sign ( $'). Next: Dates, Previous: File transmissions, Up: Protocol 5.5 Strings In various contexts, for example the Argument request and the M response, one transmits what is essentially an arbitrary string. Often this will have been supplied by the user (for example, the `-m' option to the ci request). The protocol has no mechanism to specify the character set of such strings; it would be fairly safe to stick to the invariant ISO 646 character set but the existing practice is probably to just transmit whatever the user specifies, and hope that everyone involved agrees which character set is in use, or sticks to a common subset. Next: Request intro, Previous: Strings, Up: Protocol 5.6 Dates The protocol contains times and dates in various places. For the `-D' option to the annotate, co, diff, export, history, rannotate, rdiff, rtag, tag, and update requests, the server should support two formats: 1 2 26 May 1997 13 : 01 : 40 -0000 ; RFC 822 as modified by RFC 1123 5 / 26 / 1997 13 : 01 : 40 GMT ; traditional The former format is preferred; the latter however is sent by the CVS command line client (versions 1.5 through at least 1.9). For the `-d' option to the log and rlog requests, servers should at least support RFC 822/1123 format. Clients are encouraged to use this format too (the command line CVS client, version 1.10 and older, just passed along the date format specified by the user, however). The Mod-time response and Checkin-time request use RFC 822/1123 format (see the descriptions of that response and request for details). For Notify, see the description of that request. Next: Requests, Previous: Dates, Up: Protocol 5.7 Request intro By convention, requests which begin with a capital letter do not elicit a response from the server, while all others do \u2013 save one. The exception is `gzip-file-contents'. Unrecognized requests will always elicit a response from the server, even if that request begins with a capital letter. The term command means a request which expects a response (except valid-requests). The general model is that the client transmits a great number of requests, but nothing happens until the very end when the client transmits a command. Although the intention is that transmitting several commands in one connection should be legal, existing servers probably have some bugs with some combinations of more than one command, and so clients may find it necessary to make several connections in some cases. This should be thought of as a workaround rather than a desired attribute of the protocol. Next: Response intro, Previous: Request intro, Up: Protocol 5.8 Requests Here are the requests: Root pathname \\n Response expected: no. Tell the server which CVSROOT to use. Note that pathname is a local directory and not a fully qualified CVSROOT variable. pathname must already exist; if creating a new root, use the init request, not Root. pathname does not include the hostname of the server, how to access the server, etc.; by the time the CVS protocol is in use, connection, authentication, etc., are already taken care of. The Root request must be sent only once, and it must be sent before any requests other than Valid-responses, valid-requests, UseUnchanged, Set, Global_option, init, noop, or version. Valid-responses request-list \\n Response expected: no. Tell the server what responses the client will accept. request-list is a space separated list of tokens. The Root request need not have been previously sent. valid-requests \\n Response expected: yes. Ask the server to send back a Valid-requests response. The Root request need not have been previously sent. Command-prep command \\n Response expected: yes. Notify the server of the command that we are leading up to. Intended to allow the server to send a redirect for write operations. Requires either an ok or Redirect respnose. Referrer CVSROOT \\n Response expected: no. Notify a primary server of a server which referred us. Intended to allow a primary (write) server to update the read-only mirror a client is using for reads to minimize races on any subsequent updates from the client. Directory local-directory \\n Relative-directory local-directory \\n Additional data: repository \\n. Response expected: no. Tell the server what directory to use. The repository should be a directory name from a previous server response and may be specified either relative to the pathname provided with the Root request or absolute. Relative or absolute, it must specify a path within pathname. Prior to cvs version FIXME - release number 1.12.10?, repository had to be absolute and Relative-directory was not a valid request. The Relative-directory request is synonymous with Directory and is provided to alert modern clients that a relative repository is acceptable. Note that this both gives a default for Entry and Modified and also for ci and the other commands; normal usage is to send Directory for each directory in which there will be an Entry or Modified, and then a final Directory for the original directory, then the command. The local-directory is relative to the top level at which the command is occurring (i.e. the last Directory which is sent before the command); to indicate that top level, `.' should be sent for local-directory. Here is an example of where a client gets repository and local-directory. Suppose that there is a module defined by 1 moddir 1 dir That is, one can check out moddir and it will take 1dir in the repository and check it out to moddir in the working directory. Then an initial check out could proceed like this: 1 2 3 4 5 6 7 8 9 10 C : Root / home / kingdon / zwork / cvsroot . . . C : Argument moddir C : Directory . C : . C : co S : Clear - sticky moddir / S : 1 dir / . . . S : ok In this example the response shown is Clear-sticky, but it could be another response instead. Note that it returns two pathnames. The first one, moddir/, indicates the working directory to check out into. The second one, ending in 1dir/, indicates the directory to pass back to the server in a subsequent Directory request. For example, a subsequent update request might look like: 1 2 3 4 C : Directory moddir C : 1 dir . . . C : update For a given local-directory, the repository will be the same for each of the responses, so one can use the repository from whichever response is most convenient. Typically a client will store the repository along with the sources for each local-directory, use that same setting whenever operating on that local-directory, and not update the setting as long as the local-directory exists. A client is free to rename a local-directory at any time (for example, in response to an explicit user request). While it is true that the server supplies a local-directory to the client, as noted above, this is only the default place to put the directory. Of course, the various Directory requests for a single command (for example, update or ci request) should name a particular directory with the same local-directory. Each Directory request specifies a brand-new local-directory and repository; that is, local-directory and repository are never relative to paths specified in any previous Directory request. Here's a more complex example, in which we request an update of a working directory which has been checked out from multiple places in the repository. 1 2 3 4 5 6 7 8 9 10 11 12 13 C : Argument dir1 C : Directory dir1 C : mod1 . . . C : Argument dir2 C : Directory dir2 C : mod2 . . . C : Argument dir3 C : Directory dir3 / subdir3 C : mod3 . . . C : update While directories dir1 and dir2 will be handled in similar fashion to the other examples given above, dir3 is slightly different from the server's standpoint. Notice that module mod3 is actually checked out into dir3/subdir3, meaning that directory dir3 is either empty or does not contain data checked out from this repository. The above example will work correctly in cvs 1.10.1 and later. The server will descend the tree starting from all directories mentioned in Argument requests and update those directories specifically mentioned in Directory requests. Previous versions of cvs (1.10 and earlier) do not behave the same way. While the descent of the tree begins at all directories mentioned in Argument requests, descent into subdirectories only occurs if a directory has been mentioned in a Directory request. Therefore, the above example would succeed in updating dir1 and dir2, but would skip dir3 because that directory was not specifically mentioned in a Directory request. A functional version of the above that would run on a 1.10 or earlier server is as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 C : Argument dir1 C : Directory dir1 C : mod1 . . . C : Argument dir2 C : Directory dir2 C : mod2 . . . C : Argument dir3 C : Directory dir3 C : . . . . C : Directory dir3 / subdir3 C : mod3 . . . C : update Note the extra Directory dir3 request. It might be better to use Emptydir as the repository for the dir3 directory, but the above will certainly work. One more peculiarity of the 1.10 and earlier protocol is the ordering of Directory arguments. In order for a subdirectory to be registered correctly for descent by the recursion processor, its parent must be sent first. For example, the following would not work to update dir3/subdir3: 1 2 3 4 5 6 7 8 9 . . . C : Argument dir3 C : Directory dir3 / subdir3 C : mod3 . . . C : Directory dir3 C : . . . . C : update The implementation of the server in 1.10 and earlier writes the administration files for a given directory at the time of the Directory request. It also tries to register the directory with its parent to mark it for recursion. In the above example, at the time dir3/subdir3 is created, the physical directory for dir3 will be created on disk, but the administration files will not have been created. Therefore, when the server tries to register dir3/subdir3 for recursion, the operation will silently fail because the administration files do not yet exist for dir3. Max-dotdot level \\n Response expected: no. Tell the server that level levels of directories above the directory which Directory requests are relative to will be needed. For example, if the client is planning to use a Directory request for ../../foo, it must send a Max-dotdot request with a level of at least 2. Max-dotdot must be sent before the first Directory request. Static-directory \\n Response expected: no. Tell the server that the directory most recently specified with Directory should not have additional files checked out unless explicitly requested. The client sends this if the Entries.Static flag is set, which is controlled by the Set-static-directory and Clear-static-directory responses. Sticky tagspec \\n Response expected: no. Tell the server that the directory most recently specified with Directory has a sticky tag or date tagspec. The first character of tagspec is T' for a tag, D' for a date, or some other character supplied by a Set-sticky response from a previous request to the server. The remainder of tagspec contains the actual tag or date, again as supplied by Set-sticky. The server should remember Static-directory and Sticky requests for a particular directory; the client need not resend them each time it sends a Directory request for a given directory. However, the server is not obliged to remember them beyond the context of a single command. Checkin-prog program \\n Response expected: no. Tell the server that the directory most recently specified with Directory has a checkin program program. Such a program would have been previously set with the Set-checkin-prog response. Update-prog program \\n Response expected: no. Tell the server that the directory most recently specified with Directory has an update program program. Such a program would have been previously set with the Set-update-prog response. Entry entry-line \\n Response expected: no. Tell the server what version of a file is on the local machine. The name in entry-line is a name relative to the directory most recently specified with Directory. If the user is operating on only some files in a directory, Entry requests for only those files need be included. If an Entry request is sent without Modified, Is-modified, or Unchanged, it means the file is lost (does not exist in the working directory). If both Entry and one of Modified, Is-modified, or Unchanged are sent for the same file, Entry must be sent first. For a given file, one can send Modified, Is-modified, or Unchanged, but not more than one of these three. Kopt option \\n This indicates to the server which keyword expansion options to use for the file specified by the next Modified or Is-modified request (for example `-kb' for a binary file). This is similar to Entry, but is used for a file for which there is no entries line. Typically this will be a file being added via an add or import request. The client may not send both Kopt and Entry for the same file. Checkin-time time \\n For the file specified by the next Modified request, use time as the time of the checkin. The time is in the format specified by RFC822 as modified by RFC1123. The client may specify any timezone it chooses; servers will want to convert that to their own timezone as appropriate. An example of this format is: 26 May 1997 13:01:40 -0400 There is no requirement that the client and server clocks be synchronized. The client just sends its recommendation for a timestamp (based on file timestamps or whatever), and the server should just believe it (this means that the time might be in the future, for example). Note that this is not a general-purpose way to tell the server about the timestamp of a file; that would be a separate request (if there are servers which can maintain timestamp and time of checkin separately). This request should affect the import request, and may optionally affect the ci request or other relevant requests if any. Modified filename \\n Response expected: no. Additional data: mode, \\n, file transmission. Send the server a copy of one locally modified file. filename is a file within the most recent directory sent with Directory; it must not contain /'. If the user is operating on only some files in a directory, only those files need to be included. This can also be sent without Entry, if there is no entry for the file. Is-modified filename \\n Response expected: no. Additional data: none. Like Modified, but used if the server only needs to know whether the file is modified, not the contents. The commands which can take Is-modified instead of Modified with no known change in behavior are: admin, diff (if and only if two -r' or `-D' options are specified), watch-on, watch-off, watch-add, watch-remove, watchers, editors, log, and annotate. For the status command, one can send Is-modified but if the client is using imperfect mechanisms such as timestamps to determine whether to consider a file modified, then the behavior will be different. That is, if one sends Modified, then the server will actually compare the contents of the file sent and the one it derives from to determine whether the file is genuinely modified. But if one sends Is-modified, then the server takes the client's word for it. A similar situation exists for tag, if the `-c' option is specified. Commands for which Modified is necessary are co, ci, update, and import. Commands which do not need to inform the server about a working directory, and thus should not be sending either Modified or Is-modified: rdiff, rtag, history, init, and release. Commands for which further investigation is warranted are: remove, add, and export. Pending such investigation, the more conservative course of action is to stick to Modified. Unchanged filename \\n Response expected: no. Tell the server that filename has not been modified in the checked out directory. The filename is a file within the most recent directory sent with Directory; it must not contain /'. UseUnchanged \\n Response expected: no. To specify the version of the protocol described in this document, servers must support this request (although it need not do anything) and clients must issue it. The Root request need not have been previously sent. Notify filename \\n Response expected: no. Tell the server that an edit or unedit command has taken place. The server needs to send a Notified response, but such response is deferred until the next time that the server is sending responses. The filename is a file within the most recent directory sent with Directory; it must not contain /'. Additional data: notification-type \\t time \\t clienthost \\t working-dir \\t watches \\n where notification-type is E' for edit, U' for unedit, undefined behavior if C', and all other letters should be silently ignored for future expansion. time is the time at which the edit or unedit took place, in a user-readable format of the client's choice (the server should treat the time as an opaque string rather than interpreting it). clienthost is the name of the host on which the edit or unedit took place, and working-dir is the pathname of the working directory where the edit or unedit took place. watches are the temporary watches, zero or more of the following characters in the following order: E' for edit, U' for unedit, C' for commit, and all other letters should be silently ignored for future expansion. If notification-type is E' the temporary watches are set; if it is U' they are cleared. If watches is followed by \\t then the \\t and the rest of the line should be ignored, for future expansion. The time, clienthost, and working-dir fields may not contain the characters +', ,', >', ;', or `='. Note that a client may be capable of performing an edit or unedit operation without connecting to the server at that time, and instead connecting to the server when it is convenient (for example, when a laptop is on the net again) to send the Notify requests. Even if a client is capable of deferring notifications, it should attempt to send them immediately (one can send Notify requests together with a noop request, for example), unless perhaps if it can know that a connection would be impossible. Questionable filename \\n Response expected: no. Additional data: no. Tell the server to check whether filename should be ignored, and if not, next time the server sends responses, send (in a M response) ?' followed by the directory and filename. filename must not contain /'; it needs to be a file in the directory named by the most recent Directory request. Case \\n Response expected: no. Tell the server that filenames should be matched in a case-insensitive fashion. Note that this is not the primary mechanism for achieving case-insensitivity; for the most part the client keeps track of the case which the server wants to use and takes care to always use that case regardless of what the user specifies. For example the filenames given in Entry and Modified requests for the same file must match in case regardless of whether the Case request is sent. The latter mechanism is more general (it could also be used for 8.3 filenames, VMS filenames with more than one `.', and any other situation in which there is a predictable mapping between filenames in the working directory and filenames in the protocol), but there are some situations it cannot handle (ignore patterns, or situations where the user specifies a filename and the client does not know about that file). Though this request will be supported into the forseeable future, it has been the source of numerous bug reports in the past due to the complexity of testing this functionality via the test suite and client developers are encouraged not to use it. Instead, please consider munging conflicting names and maintaining a map for communicating with the server. For example, suppose the server sends files case, CASE, and CaSe. The client could write all three files to names such as, case, case_prefix_case, and case_prefix_2_case and maintain a mapping between the file names in, for instance a new CVS/Map file. Argument text \\n Response expected: no. Save argument for use in a subsequent command. Arguments accumulate until an argument-using command is given, at which point they are forgotten. Argumentx text \\n Response expected: no. Append \\n followed by text to the current argument being saved. Global_option option \\n Response expected: no. Transmit one of the global options -q', -Q', -l', -t', -r', or -n'. option must be one of those strings, no variations (such as combining of options) are allowed. For graceful handling of valid-requests, it is probably better to make new global options separate requests, rather than trying to add them to this request. The Root request need not have been previously sent. Gzip-stream level \\n Response expected: no. Use zlib (RFC 1950/1951) compression to compress all further communication between the client and the server. As of cvs 1.12.13, this request needs to be sent as the first non-rootless request if the server is configured with compression level restrictions and level is outside the restricted range. After this request is sent, all further communication must be compressed. All further data received from the server will also be compressed. The level argument suggests to the server the level of compression that it should apply; it should be an integer between 0 and 9, inclusive, where `0' means no compression and higher numbers indicate more compression. Kerberos-encrypt \\n Response expected: no. Use Kerberos encryption to encrypt all further communication between the client and the server. This will only work if the connection was made over Kerberos in the first place. If both the Gzip-stream and the Kerberos-encrypt requests are used, the Kerberos-encrypt request should be used first. This will make the client and server encrypt the compressed data, as opposed to compressing the encrypted data. Encrypted data is generally incompressible. Note that this request does not fully prevent an attacker from hijacking the connection, in the sense that it does not prevent hijacking the connection between the initial authentication and the Kerberos-encrypt request. Gssapi-encrypt \\n Response expected: no. Use GSSAPI encryption to encrypt all further communication between the client and the server. This will only work if the connection was made over GSSAPI in the first place. See Kerberos-encrypt, above, for the relation between Gssapi-encrypt and Gzip-stream. Note that this request does not fully prevent an attacker from hijacking the connection, in the sense that it does not prevent hijacking the connection between the initial authentication and the Gssapi-encrypt request. Gssapi-authenticate \\n Response expected: no. Use GSSAPI authentication to authenticate all further communication between the client and the server. This will only work if the connection was made over GSSAPI in the first place. Encrypted data is automatically authenticated, so using both Gssapi-authenticate and Gssapi-encrypt has no effect beyond that of Gssapi-encrypt. Unlike encrypted data, it is reasonable to compress authenticated data. Note that this request does not fully prevent an attacker from hijacking the connection, in the sense that it does not prevent hijacking the connection between the initial authentication and the Gssapi-authenticate request. Set variable=value \\n Response expected: no. Set a user variable variable to value. The Root request need not have been previously sent. Hostname hostname \\n Response expected: no. Set the client hostname for an upcoming edit request. LocalDir hostname \\n Response expected: no. Set the local client directory name for an upcoming edit request. expand-modules \\n Response expected: yes. Expand the modules which are specified in the arguments. Returns the data in Module-expansion responses. Note that the server can assume that this is checkout or export, not rtag or rdiff; the latter do not access the working directory and thus have no need to expand modules on the client side. Expand may not be the best word for what this request does. It does not necessarily tell you all the files contained in a module, for example. Basically it is a way of telling you which working directories the server needs to know about in order to handle a checkout of the specified modules. For example, suppose that the server has a module defined by 1 aliasmodule - a 1 dir That is, one can check out aliasmodule and it will take 1dir in the repository and check it out to 1dir in the working directory. Now suppose the client already has this module checked out and is planning on using the co request to update it. Without using expand-modules, the client would have two bad choices: it could either send information about all working directories under the current directory, which could be unnecessarily slow, or it could be ignorant of the fact that aliasmodule stands for 1dir, and neglect to send information for 1dir, which would lead to incorrect operation. With expand-modules, the client would first ask for the module to be expanded: 1 2 3 4 5 6 7 8 C : Root / home / kingdon / zwork / cvsroot . . . C : Argument aliasmodule C : Directory . C : . C : expand - modules S : Module - expansion 1 dir S : ok and then it knows to check the 1dir directory and send requests such as Entry and Modified for the files in that directory. ci \\n diff \\n list \\n tag \\n status \\n admin \\n history \\n watchers \\n editors \\n annotate \\n Response expected: yes. Actually do a cvs command. This uses any previous Argument, Directory, Entry, or Modified requests, if they have been sent. The last Directory sent specifies the working directory at the time of the operation. No provision is made for any input from the user. This means that ci must use a -m argument if it wants to specify a log message. log \\n Response expected: yes. Show information for past revisions. This uses any previous Directory, Entry, or Modified requests, if they have been sent. The last Directory sent specifies the working directory at the time of the operation. Also uses previous Argument's of which the canonical forms are the following (cvs 1.10 and older clients sent what the user specified, but clients are encouraged to use the canonical forms and other forms are deprecated): -b, -h, -l, -N, -R, -t These options go by themselves, one option per Argument request. -d date1<date2 Select revisions between date1 and date2. Either date may be omitted in which case there is no date limit at that end of the range (clients may specify dates such as 1 Jan 1970 or 1 Jan 2038 for similar purposes but this is problematic as it makes assumptions about what dates the server supports). Dates are in RFC822/1123 format. The -d' is one Argument request and the date range is a second one. -d date1<=date2 Likewise but compare dates for equality. -d singledate Select the single, latest revision dated singledate or earlier. To include several date ranges and/or singledates, repeat the -d' option as many times as necessary. -rrev1:rev2 -rbranch -rbranch. -r Specify revisions (note that rev1 or rev2 can be omitted, or can refer to branches). Send both the -r' and the revision information in a single Argument request. To include several revision selections, repeat the -r' option. -s state -w -wlogin Select on states or users. To include more than one state or user, repeat the option. Send the -s' option as a separate argument from the state being selected. Send the -w' option as part of the same argument as the user being selected. co \\n Response expected: yes. Get files from the repository. This uses any previous Argument, Directory, Entry, or Modified requests, if they have been sent. Arguments to this command are module names; the client cannot know what directories they correspond to except by (1) just sending the co request, and then seeing what directory names the server sends back in its responses, and (2) the expand-modules request. export \\n Response expected: yes. Get files from the repository. This uses any previous Argument, Directory, Entry, or Modified requests, if they have been sent. Arguments to this command are module names, as described for the co request. The intention behind this command is that a client can get sources from a server without storing CVS information about those sources. That is, a client probably should not count on being able to take the entries line returned in the Created response from an export request and send it in a future Entry request. Note that the entries line in the Created response must indicate whether the file is binary or text, so the client can create it correctly. ls \\n rannotate \\n rdiff \\n rlist \\n rlog \\n rtag \\n Response expected: yes. Actually do a cvs command. This uses any previous Argument requests, if they have been sent. The client should not send Directory, Entry, or Modified requests for these commands; they are not used. Arguments to these commands are module names, as described for co. ls is a synonym for rlist, for compatibility with CVSNT. init root-name \\n Response expected: yes. If it doesn't already exist, create a cvs repository root-name. Note that root-name is a local directory and not a fully qualified CVSROOT variable. The Root request need not have been previously sent. suck \\n Response expected: yes. Actually do a cvs suck command. This uses a previous Argument request (only one, because the cvs suck CLI command takes only one). This is an extension specific to MirBSD, MirPorts and Debian. update \\n Response expected: yes. Actually do a cvs update command. This uses any previous Argument, Directory, Entry, or Modified requests, if they have been sent. The last Directory sent specifies the working directory at the time of the operation. The -I option is not used\u2013files which the client can decide whether to ignore are not mentioned and the client sends the Questionable request for others. import \\n Response expected: yes. Actually do a cvs import command. This uses any previous Argument, Directory, Entry, or Modified requests, if they have been sent. The last Directory sent specifies the working directory at the time of the operation - unlike most commands, the repository field of each Directory request is ignored (it merely must point somewhere within the root). The files to be imported are sent in Modified requests (files which the client knows should be ignored are not sent; the server must still process the CVSROOT/cvsignore file unless -I ! is sent). A log message must have been specified with a -m argument. add \\n Response expected: yes. Add a file or directory. This uses any previous Argument, Directory, Entry, or Modified requests, if they have been sent. The last Directory sent specifies the working directory at the time of the operation. To add a directory, send the directory to be added using Directory and Argument requests. For example: 1 2 3 4 5 6 7 8 9 10 C : Root / u / cvsroot . . . C : Argument nsdir C : Directory nsdir C : 1 dir / nsdir C : Directory . C : 1 dir C : add S : M Directory / u / cvsroot / 1 dir / nsdir put under version control S : ok You will notice that the server does not signal to the client in any particular way that the directory has been successfully added. The client is supposed to just assume that the directory has been added and update its records accordingly. Note also that adding a directory is immediate; it does not wait until a ci request as files do. To add a file, send the file to be added using a Modified request. For example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 C : Argument nfile C : Directory . C : 1 dir C : Modified nfile C : u = rw , g = r , o = r C : 6 C : hello C : add S : E cvs server : scheduling file ` nfile ' for addition S : Mode u = rw , g = r , o = r S : Checked - in . / S : / u / cvsroot / 1 dir / nfile S : / nfile / 0 /// S : E cvs server : use ' cvs commit ' to add this file permanently S : ok Note that the file has not been added to the repository; the only effect of a successful add request, for a file, is to supply the client with a new entries line containing `0' to indicate an added file. In fact, the client probably could perform this operation without contacting the server, although using add does cause the server to perform a few more checks. The client sends a subsequent ci to actually add the file to the repository. Another quirk of the add request is that with CVS 1.9 and older, a pathname specified in an Argument request cannot contain /'. There is no good reason for this restriction, and in fact more recent CVS servers don't have it. But the way to interoperate with the older servers is to ensure that all Directory requests for add (except those used to add directories, as described above), use .' for local-directory. Specifying another string for local-directory may not get an error, but it will get you strange Checked-in responses from the buggy servers. remove \\n Response expected: yes. Remove a file. This uses any previous Argument, Directory, Entry, or Modified requests, if they have been sent. The last Directory sent specifies the working directory at the time of the operation. Note that this request does not actually do anything to the repository; the only effect of a successful remove request is to supply the client with a new entries line containing `-' to indicate a removed file. In fact, the client probably could perform this operation without contacting the server, although using remove may cause the server to perform a few more checks. The client sends a subsequent ci request to actually record the removal in the repository. edit \\n Response expected: yes. Actually do the cvs edit command. This uses any previous Argument, Directory, Entry, LocalDir, or Hostname requests, if they have been sent. Unless the user has requested that edits not be granted unless no one else is editing a file, a local edit followed by an attempt to send Notify requests to the server is preferred. watch-on \\n watch-off \\n watch-add \\n watch-remove \\n Response expected: yes. Actually do the cvs watch on, cvs watch off, cvs watch add, and cvs watch remove commands, respectively. This uses any previous Argument, Directory, Entry, or Modified requests, if they have been sent. The last Directory sent specifies the working directory at the time of the operation. release \\n Response expected: yes. Note that a cvs release command has taken place and update the history file accordingly. global-list-quiet \\n Response expected: yes. This request is a synonym for noop, but its existance notifies the client that a -q option to list and rlist will be rejected. This, in a reverse-logic sort of way, is here so that when it isn't received, as for instance from CVSNT, the client will know that the quiet option has to be sent as a command option rather than a global option. noop \\n Response expected: yes. This request is a null command in the sense that it doesn't do anything, but merely (as with any other requests expecting a response) sends back any responses pertaining to pending errors, pending Notified responses, etc. The Root request need not have been previously sent. update-patches \\n Response expected: yes. This request does not actually do anything. It is used as a signal that the server is able to generate patches when given an update request. The client must issue the -u argument to update in order to receive patches. gzip-file-contents level \\n Response expected: no. Note that this request does not follow the response convention stated above. Gzip-stream is suggested instead of gzip-file-contents as it gives better compression; the only reason to implement the latter is to provide compression with cvs 1.8 and earlier. The gzip-file-contents request asks the server to compress files it sends to the client using gzip (RFC1952/1951) compression, using the specified level of compression. If this request is not made, the server must not compress files. This is only a hint to the server. It may still decide (for example, in the case of very small files, or files that already appear to be compressed) not to do the compression. Compression is indicated by a `z' preceding the file length. Availability of this request in the server indicates to the client that it may compress files sent to the server, regardless of whether the client actually uses this request. wrapper-sendme-rcsOptions \\n Response expected: yes. Request that the server transmit mappings from filenames to keyword expansion modes in Wrapper-rcsOption responses. version \\n Response expected: yes. Request that the server transmit its version message. The Root request need not have been previously sent. other-request text \\n Response expected: yes. Any unrecognized request expects a response, and does not contain any additional data. The response will normally be something like `error unrecognized request', but it could be a different error if a previous request which doesn't expect a response produced an error. When the client is done, it drops the connection. Next: Response pathnames, Previous: Requests, Up: Protocol 5.9 Introduction to Responses After a command which expects a response, the server sends however many of the following responses are appropriate. The server should not send data at other times (the current implementation may violate this principle in a few minor places, where the server is printing an error message and exiting\u2014this should be investigated further). Any set of responses always ends with error' or ok'. This indicates that the response is over. The responses Checked-in, New-entry, Updated, Created, Update-existing, Merged, and Patched are refered to as file updating responses, because they change the status of a file in the working directory in some way. The responses Mode, Mod-time, and Checksum are referred to as file update modifying responses because they modify the next file updating response. In no case shall a file update modifying response apply to a file updating response other than the next one. Nor can the same file update modifying response occur twice for a given file updating response (if servers diagnose this problem, it may aid in detecting the case where clients send an update modifying response without following it by a file updating response). Next: Responses, Previous: Response intro, Up: Protocol 5.10 The \"pathname\" in responses Many of the responses contain something called pathname. The name is somewhat misleading; it actually indicates a pair of pathnames. First, a local directory name relative to the directory in which the command was given (i.e. the last Directory before the command). Then a linefeed and a repository name. Then a slash and the filename (without a `,v' ending). The repository name may be absolute or relative to the pathname sent with the Root request. If absolute, the repository name must begin with the pathname sent with the Root request. Relative or absolute, the repository name must specify a path underneath the Root pathname. For example, for a file i386.mh which is in the local directory gas.clean/config and for which the repository name is devo/gas/config: 1 2 gas . clean / config / devo / gas / config / i386 . mh If the server wants to tell the client to create a directory, then it merely uses the directory in any response, as described above, and the client should create the directory if it does not exist. Note that this should only be done one directory at a time, in order to permit the client to correctly store the repository for each directory. Servers can use requests such as Clear-sticky, Clear-static-directory, or any other requests, to create directories. Some server implementations may poorly distinguish between a directory which should not exist and a directory which contains no files; in order to refrain from creating empty directories a client should both send the -P' option to update or co, and should also detect the case in which the server asks to create a directory but not any files within it (in that case the client should remove the directory or refrain from creating it in the first place). Note that servers could clean this up greatly by only telling the client to create directories if the directory in question should exist, but until servers do this, clients will need to offer the -P' behavior described above. Next: Text tags, Previous: Response pathnames, Up: Protocol 5.11 Responses Here are the responses: Valid-requests request-list \\n Indicate what requests the server will accept. request-list is a space separated list of tokens. If the server supports sending patches, it will include update-patches' in this list. The update-patches' request does not actually do anything. Force-gzip \\n Response expected: no. Indicates that the server requires compression. The client must send a Gzip-stream request, though the requested level may be 0'. Referrer CVSROOT Request that the client store CVSROOT as the name of this server and that this name be passed via a Referrer request to any subsequent servers contacted as a result of a Redirect response. This can be useful to allow the secondary administrator to configure the CVSROOT the primary should use to update the secondary in case the client uses a non-standard name or even a name that is unique to the client for some reason. Redirect CVSROOT Request that the client redirect its connection to CVSROOT and begin again. This response is only valid in response to a Command-prep request. If a client receives this response, it is expected to notify the write server it subsequently contacts of the CVSROOT of the server which redirected it using the Referrer' request. This information makes it possible for primary servers to update the client's mirror first, hopefully minimizing race conditions on subsequent updates from the same client. Checked-in pathname \\n Additional data: New Entries line, \\n. This means a file pathname has been successfully operated on (checked in, added, etc.). name in the Entries line is the same as the last component of pathname. New-entry pathname \\n Additional data: New Entries line, \\n. Like Checked-in, but the file is not up to date. Updated pathname \\n Additional data: New Entries line, \\n, mode, \\n, file transmission. A new copy of the file is enclosed. This is used for a new revision of an existing file, or for a new file, or for any other case in which the local (client-side) copy of the file needs to be updated, and after being updated it will be up to date. If any directory in pathname does not exist, create it. This response is not used if Created and Update-existing are supported. Created pathname \\n This is just like Updated and takes the same additional data, but is used only if no Entry, Modified, or Unchanged request has been sent for the file in question. The distinction between Created and Update-existing is so that the client can give an error message in several cases: (1) there is a file in the working directory, but not one for which Entry, Modified, or Unchanged was sent (for example, a file which was ignored, or a file for which Questionable was sent), (2) there is a file in the working directory whose name differs from the one mentioned in Created in ways that the client is unable to use to distinguish files. For example, the client is case-insensitive and the names differ only in case. Update-existing pathname \\n This is just like Updated and takes the same additional data, but is used only if a Entry, Modified, or Unchanged request has been sent for the file in question. This response, or Merged, indicates that the server has determined that it is OK to overwrite the previous contents of the file specified by pathname. Provided that the client has correctly sent Modified or Is-modified requests for a modified file, and the file was not modified while CVS was running, the server can ensure that a user's modifications are not lost. Merged pathname \\n This is just like Updated and takes the same additional data, with the one difference that after the new copy of the file is enclosed, it will still not be up to date. Used for the results of a merge, with or without conflicts. It is useful to preserve an copy of what the file looked like before the merge. This is basically handled by the server; before sending Merged it will send a Copy-file response. For example, if the file is aa and it derives from revision 1.3, the Copy-file response will tell the client to copy aa to .#aa.1.3. It is up to the client to decide how long to keep this file around; traditionally clients have left it around forever, thus letting the user clean it up as desired. But another answer, such as until the next commit, might be preferable. Rcs-diff pathname \\n This is just like Updated and takes the same additional data, with the one difference that instead of sending a new copy of the file, the server sends an RCS change text. This change text is produced by diff -n' (the GNU diff -a' option may also be used). The client must apply this change text to the existing file. This will only be used when the client has an exact copy of an earlier revision of a file. This response is only used if the update command is given the -u' argument. Patched pathname \\n This is just like Rcs-diff and takes the same additional data, except that it sends a standard patch rather than an RCS change text. The patch is produced by diff -c' for cvs 1.6 and later (see POSIX.2 for a description of this format), or diff -u' for previous versions of cvs; clients are encouraged to accept either format. Like Rcs-diff, this response is only used if the update command is given the -u' argument. The Patched response is deprecated in favor of the Rcs-diff response. However, older clients (CVS 1.9 and earlier) only support Patched. Edit-file pathname \\n Do the client-side portion of editing a file. Mode mode \\n This mode applies to the next file mentioned in Checked-in. Mode is a file update modifying response as described in Response intro. Mod-time time \\n Set the modification time of the next file sent to time. Mod-time is a file update modifying response as described in Response intro. The time is in the format specified by RFC822 as modified by RFC1123. The server may specify any timezone it chooses; clients will want to convert that to their own timezone as appropriate. An example of this format is: 26 May 1997 13:01:40 -0400 There is no requirement that the client and server clocks be synchronized. The server just sends its recommendation for a timestamp (based on its own clock, presumably), and the client should just believe it (this means that the time might be in the future, for example). If the server does not send Mod-time for a given file, the client should pick a modification time in the usual way (usually, just let the operating system set the modification time to the time that the CVS command is running). Checksum checksum\\n The checksum applies to the next file sent (that is, Checksum is a file update modifying response as described in Response intro). In the case of Patched, the checksum applies to the file after being patched, not to the patch itself. The client should compute the checksum itself, after receiving the file or patch, and signal an error if the checksums do not match. The checksum is the 128 bit MD5 checksum represented as 32 hex digits (MD5 is described in RFC1321). This response is optional, and is only used if the client supports it (as judged by the Valid-responses request). Copy-file pathname \\n Additional data: newname \\n. Copy file pathname to newname in the same directory where it already is. This does not affect CVS/Entries. This can optionally be implemented as a rename instead of a copy. The only use for it which currently has been identified is prior to a Merged response as described under Merged. Clients can probably assume that is how it is being used, if they want to worry about things like how long to keep the newname file around. Removed pathname \\n The file has been removed from the repository (this is the case where cvs prints file foobar.c is no longer pertinent'). Remove-entry pathname \\n The file needs its entry removed from CVS/Entries, but the file itself is already gone (this happens in response to a ci request which involves committing the removal of a file). Set-static-directory pathname \\n This instructs the client to set the Entries.Static flag, which it should then send back to the server in a Static-directory request whenever the directory is operated on. pathname ends in a slash; its purpose is to specify a directory, not a file within a directory. Clear-static-directory pathname \\n Like Set-static-directory, but clear, not set, the flag. Set-sticky pathname \\n Additional data: tagspec \\n. Tell the client to set a sticky tag or date, which should be supplied with the Sticky request for future operations. pathname ends in a slash; its purpose is to specify a directory, not a file within a directory. The client should store tagspec and pass it back to the server as-is, to allow for future expansion. The first character of tagspec is T' for a tag, D' for a date, or something else for future expansion. The remainder of tagspec contains the actual tag or date. Clear-sticky pathname \\n Clear any sticky tag or date set by Set-sticky. Template pathname \\n Additional data: file transmission (note: compressed file transmissions are not supported). pathname ends in a slash; its purpose is to specify a directory, not a file within a directory. Tell the client to store the file transmission as the template log message, and then use that template in the future when prompting the user for a log message. Set-checkin-prog dir \\n Additional data: prog \\n. Tell the client to set a checkin program, which should be supplied with the Checkin-prog request for future operations. Set-update-prog dir \\n Additional data: prog \\n. Tell the client to set an update program, which should be supplied with the Update-prog request for future operations. Notified pathname \\n Indicate to the client that the notification for pathname has been done. There should be one such response for every Notify request; if there are several Notify requests for a single file, the requests should be processed in order; the first Notified response pertains to the first Notify request, etc. Module-expansion pathname \\n Return a file or directory which is included in a particular module. pathname is relative to cvsroot, unlike most pathnames in responses. pathname should be used to look and see whether some or all of the module exists on the client side; it is not necessarily suitable for passing as an argument to a co request (for example, if the modules file contains the -d' option, it will be the directory specified with -d', not the name of the module). Wrapper-rcsOption pattern -k 'option' \\n Transmit to the client a filename pattern which implies a certain keyword expansion mode. The pattern is a wildcard pattern (for example, *.exe'. The option is b' for binary, and so on. Note that although the syntax happens to resemble the syntax in certain CVS configuration files, it is more constrained; there must be exactly one space between pattern and -k' and exactly one space between -k' and '', and no string is permitted in place of -k' (extensions should be done with new responses, not by extending this one, for graceful handling of Valid-responses). M text \\n A one-line message for the user. Note that the format of text is not designed for machine parsing. Although sometimes scripts and clients will have little choice, the exact text which is output is subject to vary at the discretion of the server and the example output given in this document is just that, example output. Servers are encouraged to use the MT' response, and future versions of this document will hopefully standardize more of the MT' tags; see Text tags. Mbinary \\n Additional data: file transmission (note: compressed file transmissions are not supported). This is like M', except the contents of the file transmission are binary and should be copied to standard output without translation to local text file conventions. To transmit a text file to standard output, servers should use a series of M' requests. E text \\n Same as M but send to stderr not stdout. F \\n Flush stderr. That is, make it possible for the user to see what has been written to stderr (it is up to the implementation to decide exactly how far it should go to ensure this). MT tagname data \\n This response provides for tagged text. It is similar to SGML/HTML/XML in that the data is structured and a naive application can also make some sense of it without understanding the structure. The syntax is not SGML-like, however, in order to fit into the CVS protocol better and (more importantly) to make it easier to parse, especially in a language like perl or awk. The tagname can have several forms. If it starts with a' to z' or A' to Z', then it represents tagged text. If the implementation recognizes tagname, then it may interpret data in some particular fashion. If the implementation does not recognize tagname, then it should simply treat data as text to be sent to the user (similar to an M' response). There are two tags which are general purpose. The text' tag is similar to an unrecognized tag in that it provides text which will ordinarily be sent to the user. The newline' tag is used without data and indicates that a newline will ordinarily be sent to the user (there is no provision for embedding newlines in the data of other tagged text responses). If tagname starts with +' it indicates a start tag and if it starts with -' it indicates an end tag. The remainder of tagname should be the same for matching start and end tags, and tags should be nested (for example one could have tags in the following order +bold +italic text -italic -bold but not +bold +italic text -bold -italic). A particular start and end tag may be documented to constrain the tagged text responses which are valid between them. Note that if data is present there will always be exactly one space between tagname and data; if there is more than one space, then the spaces beyond the first are part of data. Here is an example of some tagged text responses. Note that there is a trailing space after Checking in' and initial revision:' and there are two trailing spaces after `<--'. Such trailing spaces are, of course, part of data. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 MT + checking - in MT text Checking in MT fname gz . tst MT text ; MT newline MT rcsfile / home / kingdon / zwork / cvsroot / foo / gz . tst , v MT text < -- MT fname gz . tst MT newline MT text initial revision : MT init - rev 1 . 1 MT newline MT text done MT newline MT - checking - in If the client does not support the `MT' response, the same responses might be sent as: 1 2 3 4 M Checking in gz . tst ; M / home / kingdon / zwork / cvsroot / foo / gz . tst , v < -- gz.tst M initial revision : 1 . 1 M done For a list of specific tags, see Text tags. error errno-code ' text \\n The command completed with an error. errno-code is a symbolic error code (e.g. ENOENT); if the server doesn't support this feature, or if it's not appropriate for this particular message, it just omits the errno-code (in that case there are two spaces after error'). Text is an error message such as that provided by strerror(), or any other message the server wants to use. The text is like the M response, in the sense that it is not particularly intended to be machine-parsed; servers may wish to print an error message with MT responses, and then issue a error response without text (although it should be noted that MT currently has no way of flagging the output as intended for standard error, the way that the E response does). ok \\n The command completed successfully. Next: Example, Previous: Responses, Up: Protocol 5.12 Tags for the MT tagged text response The MT response, as described in Responses, offers a way for the server to send tagged text to the client. This section describes specific tags. The intention is to update this section as servers add new tags. In the following descriptions, text and newline tags are omitted. Such tags contain information which is intended for users (or to be discarded), and are subject to change at the whim of the server. To avoid being vulnerable to such whim, clients should look for the tags listed here, not text, newline, or other tags. The following tag means to indicate to the user that a file has been updated. It is more or less redundant with the Created and Update-existing responses, but we don't try to specify here whether it occurs in exactly the same circumstances as Created and Update-existing. The name is the pathname of the file being updated relative to the directory in which the command is occurring (that is, the last Directory request which is sent before the command). 1 2 3 MT + updated MT fname name MT - updated The importmergecmd tag is used when doing an import which has conflicts, or when doing an import with the -X' flag. The client can use it to report how to merge in the newly imported changes. The count is the number of conflicts, or the string No if no conflicts occurred. (The latter will only be sent for imports run with the -X' flag.) The newly imported changes can be merged by running the following command: 1 2 3 4 5 6 7 cvs checkout - j tag1 - j tag2 repository MT + importmergecmd MT conflicts count MT mergetag1 tag1 MT mergetag2 tag2 MT repository repository MT - importmergecmd Next: Requirements, Previous: Text tags, Up: Protocol 5.13 Example Here is an example; lines are prefixed by C: ' to indicate the client sends them or S: ' to indicate the server sends them. The client starts by connecting, sending the root, and completing the protocol negotiation. In actual practice the lists of valid responses and requests would be longer. C: Root /u/cvsroot C: Valid-responses ok error Checked-in M E C: valid-requests S: Valid-requests Root Directory Entry Modified Argument Argumentx ci co S: ok C: UseUnchanged The client wants to check out the supermunger module into a fresh working directory. Therefore it first expands the supermunger module; this step would be omitted if the client was operating on a directory rather than a module. C: Argument supermunger C: Directory . C: . C: expand-modules The server replies that the supermunger module expands to the directory supermunger (the simplest case): 1 2 S : Module - expansion supermunger S : ok The client then proceeds to check out the directory. The fact that it sends only a single Directory request which specifies `.' for the working directory means that there is not already a supermunger directory on the client. C: Argument -N C: Argument supermunger C: Directory . C: . C: co The server replies with the requested files. In this example, there is only one file, mungeall.c. The Clear-sticky and Clear-static-directory requests are sent by the current implementation but they have no effect because the default is for those settings to be clear when a directory is newly created. 1 2 3 4 5 6 7 8 9 10 11 12 13 S : Clear-sticky supermunger / S : / u / cvsroot / supermunger / S : Clear-static-directory supermunger / S : / u / cvsroot / supermunger / S : E cvs server : Updating supermunger S : M U supermunger / mungeall . c S : Created supermunger / S : / u / cvsroot / supermunger / mungeall . c S : / mungeall . c / 1 . 1 /// S : u = rw , g = r , o = r S : 26 S : int mein () { abort () ; } S : ok The current client implementation would break the connection here and make a new connection for the next command. However, the protocol allows it to keep the connection open and continue, which is what we show here. After the user modifies the file and instructs the client to check it back in. The client sends arguments to specify the log message and file to check in: 1 2 3 4 5 C : Argument - m C : Argument Well , you see , it took me hours and hours to find C : Argumentx this typo and I searched and searched and eventually C : Argumentx had to ask John for help . C : Argument mungeall . c It also sends information about the contents of the working directory, including the new contents of the modified file. Note that the user has changed into the supermunger directory before executing this command; the top level directory is a user-visible concept because the server should print filenames in M and E responses relative to that directory. C: Directory . C: supermunger C: Entry /mungeall.c/1.1/// C: Modified mungeall.c C: u=rw,g=r,o=r C: 26 C: int main () { abort (); } And finally, the client issues the checkin command (which makes use of the data just sent): 1 C : ci And the server tells the client that the checkin succeeded: 1 2 3 4 5 6 7 8 9 S : M Checking in mungeall . c ; S : E / u / cvsroot / supermunger / mungeall . c , v < -- mungeall . c S : E new revision : 1 . 2 ; previous revision : 1 . 1 S : E done S : Mode u = rw , g = r , o = r S : Checked-in ./ S : / u / cvsroot / supermunger / mungeall . c S : / mungeall . c / 1 . 2 /// S : ok Next: Obsolete, Previous: Example, Up: Protocol 5.14 Required versus optional parts of the protocol The following are part of every known implementation of the CVS protocol (except obsolete, pre-1.5, versions of CVS) and it is considered reasonable behavior to completely fail to work if you are connected with an implementation which attempts to not support them. Requests: Root, Valid-responses, valid-requests, Directory, Entry, Modified, Unchanged, Argument, Argumentx, ci, co, update. Responses: ok, error, Valid-requests, Checked-in, Updated, Merged, Removed, M, E. A server need not implement Repository, but in order to interoperate with CVS 1.5 through 1.9 it must claim to implement it (in Valid-requests). The client will not actually send the request. Previous: Requirements, Up: Protocol 5.15 Obsolete protocol elements This section briefly describes protocol elements which are obsolete. There is no attempt to document them in full detail. There was a Repository request which was like Directory except it only provided repository, and the local directory was assumed to be similarly named. If the UseUnchanged request was not sent, there was a Lost request which was sent to indicate that a file did not exist in the working directory, and the meaning of sending Entries without Lost or Modified was different. All current clients (CVS 1.5 and later) will send UseUnchanged if it is supported.","title":"Protocol"},{"location":"server-protocol/#the-cvs-clientserver-protocol","text":"In the following, \\n refers to a linefeed and \\t refers to a horizontal tab; requests are what the client sends and responses are what the server sends. In general, the connection is governed by the client, the server does not send responses without first receiving requests to do so; see Response Intro for more details of this convention. It is typical, early in the connection, for the client to transmit a valid-responses request, containing all the responses it supports, followed by a valid-requests request, which elicits from the server a valid-requests response containing all the requests it understands. In this way, the client and server each find out what the other supports before exchanging large amounts of data (such as file contents). General protocol conventions : Entries Lines : Transmitting RCS data File Modes : Read, write, execute, and possibly more... Filenames : Conventions regarding filenames File transmissions : How file contents are transmitted Strings: Strings in various requests and responses Dates: Times and dates The protocol itself : Request intro: General conventions relating to requests Requests: List of requests Response intro: General conventions relating to responses Response pathnames: The \"pathname\" in responses Responses: List of responses Text tags: More details about the MT response An example session, and some further observations : Example: A conversation between client and server Requirements: Things not to omit from an implementation Obsolete: Former protocol features","title":"The CVS Client/Server Protocol"},{"location":"server-protocol/#entries-lines","text":"Entries lines are transmitted as: 1 / name / version / conflict / options / tag_or_date tag_or_date is either T tag or D date or empty. If it is followed by a slash, anything after the slash shall be silently ignored. version can be empty, or start with 0 or - , for no user file, new user file, or user file to be removed, respectively. conflict , if it starts with + , indicates that the file had conflicts in it. The rest of conflict is = if the timestamp matches the file, or anything else if it doesn't. If conflict does not start with a + , it is silently ignored. options signifies the keyword expansion options (for example -ko ). In an Entry request, this indicates the options that were specified with the file from the previous file updating response (see Response Intro , for a list of file updating responses); if the client is specifying the -k or -A option to update , then it is the server which figures out what overrides what.","title":"Entries Lines"},{"location":"server-protocol/#file-modes","text":"A mode is any number of repetitions of 1 mode-type = data separated by , . mode-type is an identifier composed of alphanumeric characters. Currently specified: u for user, g for group, o for other (see below for discussion of whether these have their POSIX meaning or are more loose). Unrecognized values of mode-type are silently ignored. data consists of any data not containing , , \\0 or \\n . For u , g , and o mode types, data consists of alphanumeric characters, where r means read, w means write, x means execute, and unrecognized letters are silently ignored. The two most obvious ways in which the mode matters are: Is it writeable? This is used by the developer communication features, and is implemented even on OS/2 (and could be implemented on DOS), whose notion of mode is limited to a readonly bit. Is it executable? Unix CVS users need CVS to store this setting (for shell scripts and the like). The current CVS implementation on unix does a little bit more than just maintain these two settings, but it doesn't really have a nice general facility to store or version control the mode, even on unix, much less across operating systems with diverse protection features. So all the ins and outs of what the mode means across operating systems haven't really been worked out (e.g. should the VMS port use ACLs to get POSIX semantics for groups?).","title":"File Modes"},{"location":"server-protocol/#conventions-regarding-transmission-of-file-names","text":"In most contexts, / is used to separate directory and file names in filenames, and any use of other conventions (for example, that the user might type on the command line) is converted to that form. The only exceptions might be a few cases in which the server provides a magic cookie which the client then repeats verbatim, but as the server has not yet been ported beyond unix, the two rules provide the same answer (and what to do if future server ports are operating on a repository like e:/foo or CVS_ROOT:[FOO.BAR] has not been carefully thought out). Characters outside the invariant ISO 646 character set should be avoided in filenames. This restriction may need to be relaxed to allow for characters such as [ and ] (see above about non-unix servers); this has not been carefully considered (and currently implementations probably use whatever character sets that the operating systems they are running on allow, and/or that users specify). Of course the most portable practice is to restrict oneself further, to the POSIX portable filename character set as specified in POSIX.1.","title":"Conventions Regarding Transmission of File Names"},{"location":"server-protocol/#file-transmissions","text":"File contents (noted below as file transmission) can be sent in one of two forms. The simpler form is a number of bytes, followed by a linefeed, followed by the specified number of bytes of file contents. These are the entire contents of the specified file. Second, if both client and server support gzip-file-contents', a z' may precede the length, and the file contents' sent are actually compressed with gzip' (RFC1952/1951) compression. The length specified is that of the compressed version of the file. In neither case are the file content followed by any additional data. The transmission of a file will end with a linefeed iff that file (or its compressed form) ends with a linefeed. The encoding of file contents depends on the value for the -k' option. If the file is binary (as specified by the -kb' option in the appropriate place), then it is just a certain number of octets, and the protocol contributes nothing towards determining the encoding (using the file name is one widespread, if not universally popular, mechanism). If the file is text (not binary), then the file is sent as a series of lines, separated by linefeeds. If the keyword expansion is set to something other than -ko', then it is expected that the file conform to the RCS expectations regarding keyword expansion\u2014in particular, that it is in a character set such as ASCII in which 0x24 is a dollar sign ( $'). Next: Dates, Previous: File transmissions, Up: Protocol 5.5 Strings In various contexts, for example the Argument request and the M response, one transmits what is essentially an arbitrary string. Often this will have been supplied by the user (for example, the `-m' option to the ci request). The protocol has no mechanism to specify the character set of such strings; it would be fairly safe to stick to the invariant ISO 646 character set but the existing practice is probably to just transmit whatever the user specifies, and hope that everyone involved agrees which character set is in use, or sticks to a common subset. Next: Request intro, Previous: Strings, Up: Protocol 5.6 Dates The protocol contains times and dates in various places. For the `-D' option to the annotate, co, diff, export, history, rannotate, rdiff, rtag, tag, and update requests, the server should support two formats: 1 2 26 May 1997 13 : 01 : 40 -0000 ; RFC 822 as modified by RFC 1123 5 / 26 / 1997 13 : 01 : 40 GMT ; traditional The former format is preferred; the latter however is sent by the CVS command line client (versions 1.5 through at least 1.9). For the `-d' option to the log and rlog requests, servers should at least support RFC 822/1123 format. Clients are encouraged to use this format too (the command line CVS client, version 1.10 and older, just passed along the date format specified by the user, however). The Mod-time response and Checkin-time request use RFC 822/1123 format (see the descriptions of that response and request for details). For Notify, see the description of that request. Next: Requests, Previous: Dates, Up: Protocol 5.7 Request intro By convention, requests which begin with a capital letter do not elicit a response from the server, while all others do \u2013 save one. The exception is `gzip-file-contents'. Unrecognized requests will always elicit a response from the server, even if that request begins with a capital letter. The term command means a request which expects a response (except valid-requests). The general model is that the client transmits a great number of requests, but nothing happens until the very end when the client transmits a command. Although the intention is that transmitting several commands in one connection should be legal, existing servers probably have some bugs with some combinations of more than one command, and so clients may find it necessary to make several connections in some cases. This should be thought of as a workaround rather than a desired attribute of the protocol. Next: Response intro, Previous: Request intro, Up: Protocol 5.8 Requests Here are the requests: Root pathname \\n Response expected: no. Tell the server which CVSROOT to use. Note that pathname is a local directory and not a fully qualified CVSROOT variable. pathname must already exist; if creating a new root, use the init request, not Root. pathname does not include the hostname of the server, how to access the server, etc.; by the time the CVS protocol is in use, connection, authentication, etc., are already taken care of. The Root request must be sent only once, and it must be sent before any requests other than Valid-responses, valid-requests, UseUnchanged, Set, Global_option, init, noop, or version. Valid-responses request-list \\n Response expected: no. Tell the server what responses the client will accept. request-list is a space separated list of tokens. The Root request need not have been previously sent. valid-requests \\n Response expected: yes. Ask the server to send back a Valid-requests response. The Root request need not have been previously sent. Command-prep command \\n Response expected: yes. Notify the server of the command that we are leading up to. Intended to allow the server to send a redirect for write operations. Requires either an ok or Redirect respnose. Referrer CVSROOT \\n Response expected: no. Notify a primary server of a server which referred us. Intended to allow a primary (write) server to update the read-only mirror a client is using for reads to minimize races on any subsequent updates from the client. Directory local-directory \\n Relative-directory local-directory \\n Additional data: repository \\n. Response expected: no. Tell the server what directory to use. The repository should be a directory name from a previous server response and may be specified either relative to the pathname provided with the Root request or absolute. Relative or absolute, it must specify a path within pathname. Prior to cvs version FIXME - release number 1.12.10?, repository had to be absolute and Relative-directory was not a valid request. The Relative-directory request is synonymous with Directory and is provided to alert modern clients that a relative repository is acceptable. Note that this both gives a default for Entry and Modified and also for ci and the other commands; normal usage is to send Directory for each directory in which there will be an Entry or Modified, and then a final Directory for the original directory, then the command. The local-directory is relative to the top level at which the command is occurring (i.e. the last Directory which is sent before the command); to indicate that top level, `.' should be sent for local-directory. Here is an example of where a client gets repository and local-directory. Suppose that there is a module defined by 1 moddir 1 dir That is, one can check out moddir and it will take 1dir in the repository and check it out to moddir in the working directory. Then an initial check out could proceed like this: 1 2 3 4 5 6 7 8 9 10 C : Root / home / kingdon / zwork / cvsroot . . . C : Argument moddir C : Directory . C : . C : co S : Clear - sticky moddir / S : 1 dir / . . . S : ok In this example the response shown is Clear-sticky, but it could be another response instead. Note that it returns two pathnames. The first one, moddir/, indicates the working directory to check out into. The second one, ending in 1dir/, indicates the directory to pass back to the server in a subsequent Directory request. For example, a subsequent update request might look like: 1 2 3 4 C : Directory moddir C : 1 dir . . . C : update For a given local-directory, the repository will be the same for each of the responses, so one can use the repository from whichever response is most convenient. Typically a client will store the repository along with the sources for each local-directory, use that same setting whenever operating on that local-directory, and not update the setting as long as the local-directory exists. A client is free to rename a local-directory at any time (for example, in response to an explicit user request). While it is true that the server supplies a local-directory to the client, as noted above, this is only the default place to put the directory. Of course, the various Directory requests for a single command (for example, update or ci request) should name a particular directory with the same local-directory. Each Directory request specifies a brand-new local-directory and repository; that is, local-directory and repository are never relative to paths specified in any previous Directory request. Here's a more complex example, in which we request an update of a working directory which has been checked out from multiple places in the repository. 1 2 3 4 5 6 7 8 9 10 11 12 13 C : Argument dir1 C : Directory dir1 C : mod1 . . . C : Argument dir2 C : Directory dir2 C : mod2 . . . C : Argument dir3 C : Directory dir3 / subdir3 C : mod3 . . . C : update While directories dir1 and dir2 will be handled in similar fashion to the other examples given above, dir3 is slightly different from the server's standpoint. Notice that module mod3 is actually checked out into dir3/subdir3, meaning that directory dir3 is either empty or does not contain data checked out from this repository. The above example will work correctly in cvs 1.10.1 and later. The server will descend the tree starting from all directories mentioned in Argument requests and update those directories specifically mentioned in Directory requests. Previous versions of cvs (1.10 and earlier) do not behave the same way. While the descent of the tree begins at all directories mentioned in Argument requests, descent into subdirectories only occurs if a directory has been mentioned in a Directory request. Therefore, the above example would succeed in updating dir1 and dir2, but would skip dir3 because that directory was not specifically mentioned in a Directory request. A functional version of the above that would run on a 1.10 or earlier server is as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 C : Argument dir1 C : Directory dir1 C : mod1 . . . C : Argument dir2 C : Directory dir2 C : mod2 . . . C : Argument dir3 C : Directory dir3 C : . . . . C : Directory dir3 / subdir3 C : mod3 . . . C : update Note the extra Directory dir3 request. It might be better to use Emptydir as the repository for the dir3 directory, but the above will certainly work. One more peculiarity of the 1.10 and earlier protocol is the ordering of Directory arguments. In order for a subdirectory to be registered correctly for descent by the recursion processor, its parent must be sent first. For example, the following would not work to update dir3/subdir3: 1 2 3 4 5 6 7 8 9 . . . C : Argument dir3 C : Directory dir3 / subdir3 C : mod3 . . . C : Directory dir3 C : . . . . C : update The implementation of the server in 1.10 and earlier writes the administration files for a given directory at the time of the Directory request. It also tries to register the directory with its parent to mark it for recursion. In the above example, at the time dir3/subdir3 is created, the physical directory for dir3 will be created on disk, but the administration files will not have been created. Therefore, when the server tries to register dir3/subdir3 for recursion, the operation will silently fail because the administration files do not yet exist for dir3. Max-dotdot level \\n Response expected: no. Tell the server that level levels of directories above the directory which Directory requests are relative to will be needed. For example, if the client is planning to use a Directory request for ../../foo, it must send a Max-dotdot request with a level of at least 2. Max-dotdot must be sent before the first Directory request. Static-directory \\n Response expected: no. Tell the server that the directory most recently specified with Directory should not have additional files checked out unless explicitly requested. The client sends this if the Entries.Static flag is set, which is controlled by the Set-static-directory and Clear-static-directory responses. Sticky tagspec \\n Response expected: no. Tell the server that the directory most recently specified with Directory has a sticky tag or date tagspec. The first character of tagspec is T' for a tag, D' for a date, or some other character supplied by a Set-sticky response from a previous request to the server. The remainder of tagspec contains the actual tag or date, again as supplied by Set-sticky. The server should remember Static-directory and Sticky requests for a particular directory; the client need not resend them each time it sends a Directory request for a given directory. However, the server is not obliged to remember them beyond the context of a single command. Checkin-prog program \\n Response expected: no. Tell the server that the directory most recently specified with Directory has a checkin program program. Such a program would have been previously set with the Set-checkin-prog response. Update-prog program \\n Response expected: no. Tell the server that the directory most recently specified with Directory has an update program program. Such a program would have been previously set with the Set-update-prog response. Entry entry-line \\n Response expected: no. Tell the server what version of a file is on the local machine. The name in entry-line is a name relative to the directory most recently specified with Directory. If the user is operating on only some files in a directory, Entry requests for only those files need be included. If an Entry request is sent without Modified, Is-modified, or Unchanged, it means the file is lost (does not exist in the working directory). If both Entry and one of Modified, Is-modified, or Unchanged are sent for the same file, Entry must be sent first. For a given file, one can send Modified, Is-modified, or Unchanged, but not more than one of these three. Kopt option \\n This indicates to the server which keyword expansion options to use for the file specified by the next Modified or Is-modified request (for example `-kb' for a binary file). This is similar to Entry, but is used for a file for which there is no entries line. Typically this will be a file being added via an add or import request. The client may not send both Kopt and Entry for the same file. Checkin-time time \\n For the file specified by the next Modified request, use time as the time of the checkin. The time is in the format specified by RFC822 as modified by RFC1123. The client may specify any timezone it chooses; servers will want to convert that to their own timezone as appropriate. An example of this format is: 26 May 1997 13:01:40 -0400 There is no requirement that the client and server clocks be synchronized. The client just sends its recommendation for a timestamp (based on file timestamps or whatever), and the server should just believe it (this means that the time might be in the future, for example). Note that this is not a general-purpose way to tell the server about the timestamp of a file; that would be a separate request (if there are servers which can maintain timestamp and time of checkin separately). This request should affect the import request, and may optionally affect the ci request or other relevant requests if any. Modified filename \\n Response expected: no. Additional data: mode, \\n, file transmission. Send the server a copy of one locally modified file. filename is a file within the most recent directory sent with Directory; it must not contain /'. If the user is operating on only some files in a directory, only those files need to be included. This can also be sent without Entry, if there is no entry for the file. Is-modified filename \\n Response expected: no. Additional data: none. Like Modified, but used if the server only needs to know whether the file is modified, not the contents. The commands which can take Is-modified instead of Modified with no known change in behavior are: admin, diff (if and only if two -r' or `-D' options are specified), watch-on, watch-off, watch-add, watch-remove, watchers, editors, log, and annotate. For the status command, one can send Is-modified but if the client is using imperfect mechanisms such as timestamps to determine whether to consider a file modified, then the behavior will be different. That is, if one sends Modified, then the server will actually compare the contents of the file sent and the one it derives from to determine whether the file is genuinely modified. But if one sends Is-modified, then the server takes the client's word for it. A similar situation exists for tag, if the `-c' option is specified. Commands for which Modified is necessary are co, ci, update, and import. Commands which do not need to inform the server about a working directory, and thus should not be sending either Modified or Is-modified: rdiff, rtag, history, init, and release. Commands for which further investigation is warranted are: remove, add, and export. Pending such investigation, the more conservative course of action is to stick to Modified. Unchanged filename \\n Response expected: no. Tell the server that filename has not been modified in the checked out directory. The filename is a file within the most recent directory sent with Directory; it must not contain /'. UseUnchanged \\n Response expected: no. To specify the version of the protocol described in this document, servers must support this request (although it need not do anything) and clients must issue it. The Root request need not have been previously sent. Notify filename \\n Response expected: no. Tell the server that an edit or unedit command has taken place. The server needs to send a Notified response, but such response is deferred until the next time that the server is sending responses. The filename is a file within the most recent directory sent with Directory; it must not contain /'. Additional data: notification-type \\t time \\t clienthost \\t working-dir \\t watches \\n where notification-type is E' for edit, U' for unedit, undefined behavior if C', and all other letters should be silently ignored for future expansion. time is the time at which the edit or unedit took place, in a user-readable format of the client's choice (the server should treat the time as an opaque string rather than interpreting it). clienthost is the name of the host on which the edit or unedit took place, and working-dir is the pathname of the working directory where the edit or unedit took place. watches are the temporary watches, zero or more of the following characters in the following order: E' for edit, U' for unedit, C' for commit, and all other letters should be silently ignored for future expansion. If notification-type is E' the temporary watches are set; if it is U' they are cleared. If watches is followed by \\t then the \\t and the rest of the line should be ignored, for future expansion. The time, clienthost, and working-dir fields may not contain the characters +', ,', >', ;', or `='. Note that a client may be capable of performing an edit or unedit operation without connecting to the server at that time, and instead connecting to the server when it is convenient (for example, when a laptop is on the net again) to send the Notify requests. Even if a client is capable of deferring notifications, it should attempt to send them immediately (one can send Notify requests together with a noop request, for example), unless perhaps if it can know that a connection would be impossible. Questionable filename \\n Response expected: no. Additional data: no. Tell the server to check whether filename should be ignored, and if not, next time the server sends responses, send (in a M response) ?' followed by the directory and filename. filename must not contain /'; it needs to be a file in the directory named by the most recent Directory request. Case \\n Response expected: no. Tell the server that filenames should be matched in a case-insensitive fashion. Note that this is not the primary mechanism for achieving case-insensitivity; for the most part the client keeps track of the case which the server wants to use and takes care to always use that case regardless of what the user specifies. For example the filenames given in Entry and Modified requests for the same file must match in case regardless of whether the Case request is sent. The latter mechanism is more general (it could also be used for 8.3 filenames, VMS filenames with more than one `.', and any other situation in which there is a predictable mapping between filenames in the working directory and filenames in the protocol), but there are some situations it cannot handle (ignore patterns, or situations where the user specifies a filename and the client does not know about that file). Though this request will be supported into the forseeable future, it has been the source of numerous bug reports in the past due to the complexity of testing this functionality via the test suite and client developers are encouraged not to use it. Instead, please consider munging conflicting names and maintaining a map for communicating with the server. For example, suppose the server sends files case, CASE, and CaSe. The client could write all three files to names such as, case, case_prefix_case, and case_prefix_2_case and maintain a mapping between the file names in, for instance a new CVS/Map file. Argument text \\n Response expected: no. Save argument for use in a subsequent command. Arguments accumulate until an argument-using command is given, at which point they are forgotten. Argumentx text \\n Response expected: no. Append \\n followed by text to the current argument being saved. Global_option option \\n Response expected: no. Transmit one of the global options -q', -Q', -l', -t', -r', or -n'. option must be one of those strings, no variations (such as combining of options) are allowed. For graceful handling of valid-requests, it is probably better to make new global options separate requests, rather than trying to add them to this request. The Root request need not have been previously sent. Gzip-stream level \\n Response expected: no. Use zlib (RFC 1950/1951) compression to compress all further communication between the client and the server. As of cvs 1.12.13, this request needs to be sent as the first non-rootless request if the server is configured with compression level restrictions and level is outside the restricted range. After this request is sent, all further communication must be compressed. All further data received from the server will also be compressed. The level argument suggests to the server the level of compression that it should apply; it should be an integer between 0 and 9, inclusive, where `0' means no compression and higher numbers indicate more compression. Kerberos-encrypt \\n Response expected: no. Use Kerberos encryption to encrypt all further communication between the client and the server. This will only work if the connection was made over Kerberos in the first place. If both the Gzip-stream and the Kerberos-encrypt requests are used, the Kerberos-encrypt request should be used first. This will make the client and server encrypt the compressed data, as opposed to compressing the encrypted data. Encrypted data is generally incompressible. Note that this request does not fully prevent an attacker from hijacking the connection, in the sense that it does not prevent hijacking the connection between the initial authentication and the Kerberos-encrypt request. Gssapi-encrypt \\n Response expected: no. Use GSSAPI encryption to encrypt all further communication between the client and the server. This will only work if the connection was made over GSSAPI in the first place. See Kerberos-encrypt, above, for the relation between Gssapi-encrypt and Gzip-stream. Note that this request does not fully prevent an attacker from hijacking the connection, in the sense that it does not prevent hijacking the connection between the initial authentication and the Gssapi-encrypt request. Gssapi-authenticate \\n Response expected: no. Use GSSAPI authentication to authenticate all further communication between the client and the server. This will only work if the connection was made over GSSAPI in the first place. Encrypted data is automatically authenticated, so using both Gssapi-authenticate and Gssapi-encrypt has no effect beyond that of Gssapi-encrypt. Unlike encrypted data, it is reasonable to compress authenticated data. Note that this request does not fully prevent an attacker from hijacking the connection, in the sense that it does not prevent hijacking the connection between the initial authentication and the Gssapi-authenticate request. Set variable=value \\n Response expected: no. Set a user variable variable to value. The Root request need not have been previously sent. Hostname hostname \\n Response expected: no. Set the client hostname for an upcoming edit request. LocalDir hostname \\n Response expected: no. Set the local client directory name for an upcoming edit request. expand-modules \\n Response expected: yes. Expand the modules which are specified in the arguments. Returns the data in Module-expansion responses. Note that the server can assume that this is checkout or export, not rtag or rdiff; the latter do not access the working directory and thus have no need to expand modules on the client side. Expand may not be the best word for what this request does. It does not necessarily tell you all the files contained in a module, for example. Basically it is a way of telling you which working directories the server needs to know about in order to handle a checkout of the specified modules. For example, suppose that the server has a module defined by 1 aliasmodule - a 1 dir That is, one can check out aliasmodule and it will take 1dir in the repository and check it out to 1dir in the working directory. Now suppose the client already has this module checked out and is planning on using the co request to update it. Without using expand-modules, the client would have two bad choices: it could either send information about all working directories under the current directory, which could be unnecessarily slow, or it could be ignorant of the fact that aliasmodule stands for 1dir, and neglect to send information for 1dir, which would lead to incorrect operation. With expand-modules, the client would first ask for the module to be expanded: 1 2 3 4 5 6 7 8 C : Root / home / kingdon / zwork / cvsroot . . . C : Argument aliasmodule C : Directory . C : . C : expand - modules S : Module - expansion 1 dir S : ok and then it knows to check the 1dir directory and send requests such as Entry and Modified for the files in that directory. ci \\n diff \\n list \\n tag \\n status \\n admin \\n history \\n watchers \\n editors \\n annotate \\n Response expected: yes. Actually do a cvs command. This uses any previous Argument, Directory, Entry, or Modified requests, if they have been sent. The last Directory sent specifies the working directory at the time of the operation. No provision is made for any input from the user. This means that ci must use a -m argument if it wants to specify a log message. log \\n Response expected: yes. Show information for past revisions. This uses any previous Directory, Entry, or Modified requests, if they have been sent. The last Directory sent specifies the working directory at the time of the operation. Also uses previous Argument's of which the canonical forms are the following (cvs 1.10 and older clients sent what the user specified, but clients are encouraged to use the canonical forms and other forms are deprecated): -b, -h, -l, -N, -R, -t These options go by themselves, one option per Argument request. -d date1<date2 Select revisions between date1 and date2. Either date may be omitted in which case there is no date limit at that end of the range (clients may specify dates such as 1 Jan 1970 or 1 Jan 2038 for similar purposes but this is problematic as it makes assumptions about what dates the server supports). Dates are in RFC822/1123 format. The -d' is one Argument request and the date range is a second one. -d date1<=date2 Likewise but compare dates for equality. -d singledate Select the single, latest revision dated singledate or earlier. To include several date ranges and/or singledates, repeat the -d' option as many times as necessary. -rrev1:rev2 -rbranch -rbranch. -r Specify revisions (note that rev1 or rev2 can be omitted, or can refer to branches). Send both the -r' and the revision information in a single Argument request. To include several revision selections, repeat the -r' option. -s state -w -wlogin Select on states or users. To include more than one state or user, repeat the option. Send the -s' option as a separate argument from the state being selected. Send the -w' option as part of the same argument as the user being selected. co \\n Response expected: yes. Get files from the repository. This uses any previous Argument, Directory, Entry, or Modified requests, if they have been sent. Arguments to this command are module names; the client cannot know what directories they correspond to except by (1) just sending the co request, and then seeing what directory names the server sends back in its responses, and (2) the expand-modules request. export \\n Response expected: yes. Get files from the repository. This uses any previous Argument, Directory, Entry, or Modified requests, if they have been sent. Arguments to this command are module names, as described for the co request. The intention behind this command is that a client can get sources from a server without storing CVS information about those sources. That is, a client probably should not count on being able to take the entries line returned in the Created response from an export request and send it in a future Entry request. Note that the entries line in the Created response must indicate whether the file is binary or text, so the client can create it correctly. ls \\n rannotate \\n rdiff \\n rlist \\n rlog \\n rtag \\n Response expected: yes. Actually do a cvs command. This uses any previous Argument requests, if they have been sent. The client should not send Directory, Entry, or Modified requests for these commands; they are not used. Arguments to these commands are module names, as described for co. ls is a synonym for rlist, for compatibility with CVSNT. init root-name \\n Response expected: yes. If it doesn't already exist, create a cvs repository root-name. Note that root-name is a local directory and not a fully qualified CVSROOT variable. The Root request need not have been previously sent. suck \\n Response expected: yes. Actually do a cvs suck command. This uses a previous Argument request (only one, because the cvs suck CLI command takes only one). This is an extension specific to MirBSD, MirPorts and Debian. update \\n Response expected: yes. Actually do a cvs update command. This uses any previous Argument, Directory, Entry, or Modified requests, if they have been sent. The last Directory sent specifies the working directory at the time of the operation. The -I option is not used\u2013files which the client can decide whether to ignore are not mentioned and the client sends the Questionable request for others. import \\n Response expected: yes. Actually do a cvs import command. This uses any previous Argument, Directory, Entry, or Modified requests, if they have been sent. The last Directory sent specifies the working directory at the time of the operation - unlike most commands, the repository field of each Directory request is ignored (it merely must point somewhere within the root). The files to be imported are sent in Modified requests (files which the client knows should be ignored are not sent; the server must still process the CVSROOT/cvsignore file unless -I ! is sent). A log message must have been specified with a -m argument. add \\n Response expected: yes. Add a file or directory. This uses any previous Argument, Directory, Entry, or Modified requests, if they have been sent. The last Directory sent specifies the working directory at the time of the operation. To add a directory, send the directory to be added using Directory and Argument requests. For example: 1 2 3 4 5 6 7 8 9 10 C : Root / u / cvsroot . . . C : Argument nsdir C : Directory nsdir C : 1 dir / nsdir C : Directory . C : 1 dir C : add S : M Directory / u / cvsroot / 1 dir / nsdir put under version control S : ok You will notice that the server does not signal to the client in any particular way that the directory has been successfully added. The client is supposed to just assume that the directory has been added and update its records accordingly. Note also that adding a directory is immediate; it does not wait until a ci request as files do. To add a file, send the file to be added using a Modified request. For example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 C : Argument nfile C : Directory . C : 1 dir C : Modified nfile C : u = rw , g = r , o = r C : 6 C : hello C : add S : E cvs server : scheduling file ` nfile ' for addition S : Mode u = rw , g = r , o = r S : Checked - in . / S : / u / cvsroot / 1 dir / nfile S : / nfile / 0 /// S : E cvs server : use ' cvs commit ' to add this file permanently S : ok Note that the file has not been added to the repository; the only effect of a successful add request, for a file, is to supply the client with a new entries line containing `0' to indicate an added file. In fact, the client probably could perform this operation without contacting the server, although using add does cause the server to perform a few more checks. The client sends a subsequent ci to actually add the file to the repository. Another quirk of the add request is that with CVS 1.9 and older, a pathname specified in an Argument request cannot contain /'. There is no good reason for this restriction, and in fact more recent CVS servers don't have it. But the way to interoperate with the older servers is to ensure that all Directory requests for add (except those used to add directories, as described above), use .' for local-directory. Specifying another string for local-directory may not get an error, but it will get you strange Checked-in responses from the buggy servers. remove \\n Response expected: yes. Remove a file. This uses any previous Argument, Directory, Entry, or Modified requests, if they have been sent. The last Directory sent specifies the working directory at the time of the operation. Note that this request does not actually do anything to the repository; the only effect of a successful remove request is to supply the client with a new entries line containing `-' to indicate a removed file. In fact, the client probably could perform this operation without contacting the server, although using remove may cause the server to perform a few more checks. The client sends a subsequent ci request to actually record the removal in the repository. edit \\n Response expected: yes. Actually do the cvs edit command. This uses any previous Argument, Directory, Entry, LocalDir, or Hostname requests, if they have been sent. Unless the user has requested that edits not be granted unless no one else is editing a file, a local edit followed by an attempt to send Notify requests to the server is preferred. watch-on \\n watch-off \\n watch-add \\n watch-remove \\n Response expected: yes. Actually do the cvs watch on, cvs watch off, cvs watch add, and cvs watch remove commands, respectively. This uses any previous Argument, Directory, Entry, or Modified requests, if they have been sent. The last Directory sent specifies the working directory at the time of the operation. release \\n Response expected: yes. Note that a cvs release command has taken place and update the history file accordingly. global-list-quiet \\n Response expected: yes. This request is a synonym for noop, but its existance notifies the client that a -q option to list and rlist will be rejected. This, in a reverse-logic sort of way, is here so that when it isn't received, as for instance from CVSNT, the client will know that the quiet option has to be sent as a command option rather than a global option. noop \\n Response expected: yes. This request is a null command in the sense that it doesn't do anything, but merely (as with any other requests expecting a response) sends back any responses pertaining to pending errors, pending Notified responses, etc. The Root request need not have been previously sent. update-patches \\n Response expected: yes. This request does not actually do anything. It is used as a signal that the server is able to generate patches when given an update request. The client must issue the -u argument to update in order to receive patches. gzip-file-contents level \\n Response expected: no. Note that this request does not follow the response convention stated above. Gzip-stream is suggested instead of gzip-file-contents as it gives better compression; the only reason to implement the latter is to provide compression with cvs 1.8 and earlier. The gzip-file-contents request asks the server to compress files it sends to the client using gzip (RFC1952/1951) compression, using the specified level of compression. If this request is not made, the server must not compress files. This is only a hint to the server. It may still decide (for example, in the case of very small files, or files that already appear to be compressed) not to do the compression. Compression is indicated by a `z' preceding the file length. Availability of this request in the server indicates to the client that it may compress files sent to the server, regardless of whether the client actually uses this request. wrapper-sendme-rcsOptions \\n Response expected: yes. Request that the server transmit mappings from filenames to keyword expansion modes in Wrapper-rcsOption responses. version \\n Response expected: yes. Request that the server transmit its version message. The Root request need not have been previously sent. other-request text \\n Response expected: yes. Any unrecognized request expects a response, and does not contain any additional data. The response will normally be something like `error unrecognized request', but it could be a different error if a previous request which doesn't expect a response produced an error. When the client is done, it drops the connection. Next: Response pathnames, Previous: Requests, Up: Protocol 5.9 Introduction to Responses After a command which expects a response, the server sends however many of the following responses are appropriate. The server should not send data at other times (the current implementation may violate this principle in a few minor places, where the server is printing an error message and exiting\u2014this should be investigated further). Any set of responses always ends with error' or ok'. This indicates that the response is over. The responses Checked-in, New-entry, Updated, Created, Update-existing, Merged, and Patched are refered to as file updating responses, because they change the status of a file in the working directory in some way. The responses Mode, Mod-time, and Checksum are referred to as file update modifying responses because they modify the next file updating response. In no case shall a file update modifying response apply to a file updating response other than the next one. Nor can the same file update modifying response occur twice for a given file updating response (if servers diagnose this problem, it may aid in detecting the case where clients send an update modifying response without following it by a file updating response). Next: Responses, Previous: Response intro, Up: Protocol 5.10 The \"pathname\" in responses Many of the responses contain something called pathname. The name is somewhat misleading; it actually indicates a pair of pathnames. First, a local directory name relative to the directory in which the command was given (i.e. the last Directory before the command). Then a linefeed and a repository name. Then a slash and the filename (without a `,v' ending). The repository name may be absolute or relative to the pathname sent with the Root request. If absolute, the repository name must begin with the pathname sent with the Root request. Relative or absolute, the repository name must specify a path underneath the Root pathname. For example, for a file i386.mh which is in the local directory gas.clean/config and for which the repository name is devo/gas/config: 1 2 gas . clean / config / devo / gas / config / i386 . mh If the server wants to tell the client to create a directory, then it merely uses the directory in any response, as described above, and the client should create the directory if it does not exist. Note that this should only be done one directory at a time, in order to permit the client to correctly store the repository for each directory. Servers can use requests such as Clear-sticky, Clear-static-directory, or any other requests, to create directories. Some server implementations may poorly distinguish between a directory which should not exist and a directory which contains no files; in order to refrain from creating empty directories a client should both send the -P' option to update or co, and should also detect the case in which the server asks to create a directory but not any files within it (in that case the client should remove the directory or refrain from creating it in the first place). Note that servers could clean this up greatly by only telling the client to create directories if the directory in question should exist, but until servers do this, clients will need to offer the -P' behavior described above. Next: Text tags, Previous: Response pathnames, Up: Protocol 5.11 Responses Here are the responses: Valid-requests request-list \\n Indicate what requests the server will accept. request-list is a space separated list of tokens. If the server supports sending patches, it will include update-patches' in this list. The update-patches' request does not actually do anything. Force-gzip \\n Response expected: no. Indicates that the server requires compression. The client must send a Gzip-stream request, though the requested level may be 0'. Referrer CVSROOT Request that the client store CVSROOT as the name of this server and that this name be passed via a Referrer request to any subsequent servers contacted as a result of a Redirect response. This can be useful to allow the secondary administrator to configure the CVSROOT the primary should use to update the secondary in case the client uses a non-standard name or even a name that is unique to the client for some reason. Redirect CVSROOT Request that the client redirect its connection to CVSROOT and begin again. This response is only valid in response to a Command-prep request. If a client receives this response, it is expected to notify the write server it subsequently contacts of the CVSROOT of the server which redirected it using the Referrer' request. This information makes it possible for primary servers to update the client's mirror first, hopefully minimizing race conditions on subsequent updates from the same client. Checked-in pathname \\n Additional data: New Entries line, \\n. This means a file pathname has been successfully operated on (checked in, added, etc.). name in the Entries line is the same as the last component of pathname. New-entry pathname \\n Additional data: New Entries line, \\n. Like Checked-in, but the file is not up to date. Updated pathname \\n Additional data: New Entries line, \\n, mode, \\n, file transmission. A new copy of the file is enclosed. This is used for a new revision of an existing file, or for a new file, or for any other case in which the local (client-side) copy of the file needs to be updated, and after being updated it will be up to date. If any directory in pathname does not exist, create it. This response is not used if Created and Update-existing are supported. Created pathname \\n This is just like Updated and takes the same additional data, but is used only if no Entry, Modified, or Unchanged request has been sent for the file in question. The distinction between Created and Update-existing is so that the client can give an error message in several cases: (1) there is a file in the working directory, but not one for which Entry, Modified, or Unchanged was sent (for example, a file which was ignored, or a file for which Questionable was sent), (2) there is a file in the working directory whose name differs from the one mentioned in Created in ways that the client is unable to use to distinguish files. For example, the client is case-insensitive and the names differ only in case. Update-existing pathname \\n This is just like Updated and takes the same additional data, but is used only if a Entry, Modified, or Unchanged request has been sent for the file in question. This response, or Merged, indicates that the server has determined that it is OK to overwrite the previous contents of the file specified by pathname. Provided that the client has correctly sent Modified or Is-modified requests for a modified file, and the file was not modified while CVS was running, the server can ensure that a user's modifications are not lost. Merged pathname \\n This is just like Updated and takes the same additional data, with the one difference that after the new copy of the file is enclosed, it will still not be up to date. Used for the results of a merge, with or without conflicts. It is useful to preserve an copy of what the file looked like before the merge. This is basically handled by the server; before sending Merged it will send a Copy-file response. For example, if the file is aa and it derives from revision 1.3, the Copy-file response will tell the client to copy aa to .#aa.1.3. It is up to the client to decide how long to keep this file around; traditionally clients have left it around forever, thus letting the user clean it up as desired. But another answer, such as until the next commit, might be preferable. Rcs-diff pathname \\n This is just like Updated and takes the same additional data, with the one difference that instead of sending a new copy of the file, the server sends an RCS change text. This change text is produced by diff -n' (the GNU diff -a' option may also be used). The client must apply this change text to the existing file. This will only be used when the client has an exact copy of an earlier revision of a file. This response is only used if the update command is given the -u' argument. Patched pathname \\n This is just like Rcs-diff and takes the same additional data, except that it sends a standard patch rather than an RCS change text. The patch is produced by diff -c' for cvs 1.6 and later (see POSIX.2 for a description of this format), or diff -u' for previous versions of cvs; clients are encouraged to accept either format. Like Rcs-diff, this response is only used if the update command is given the -u' argument. The Patched response is deprecated in favor of the Rcs-diff response. However, older clients (CVS 1.9 and earlier) only support Patched. Edit-file pathname \\n Do the client-side portion of editing a file. Mode mode \\n This mode applies to the next file mentioned in Checked-in. Mode is a file update modifying response as described in Response intro. Mod-time time \\n Set the modification time of the next file sent to time. Mod-time is a file update modifying response as described in Response intro. The time is in the format specified by RFC822 as modified by RFC1123. The server may specify any timezone it chooses; clients will want to convert that to their own timezone as appropriate. An example of this format is: 26 May 1997 13:01:40 -0400 There is no requirement that the client and server clocks be synchronized. The server just sends its recommendation for a timestamp (based on its own clock, presumably), and the client should just believe it (this means that the time might be in the future, for example). If the server does not send Mod-time for a given file, the client should pick a modification time in the usual way (usually, just let the operating system set the modification time to the time that the CVS command is running). Checksum checksum\\n The checksum applies to the next file sent (that is, Checksum is a file update modifying response as described in Response intro). In the case of Patched, the checksum applies to the file after being patched, not to the patch itself. The client should compute the checksum itself, after receiving the file or patch, and signal an error if the checksums do not match. The checksum is the 128 bit MD5 checksum represented as 32 hex digits (MD5 is described in RFC1321). This response is optional, and is only used if the client supports it (as judged by the Valid-responses request). Copy-file pathname \\n Additional data: newname \\n. Copy file pathname to newname in the same directory where it already is. This does not affect CVS/Entries. This can optionally be implemented as a rename instead of a copy. The only use for it which currently has been identified is prior to a Merged response as described under Merged. Clients can probably assume that is how it is being used, if they want to worry about things like how long to keep the newname file around. Removed pathname \\n The file has been removed from the repository (this is the case where cvs prints file foobar.c is no longer pertinent'). Remove-entry pathname \\n The file needs its entry removed from CVS/Entries, but the file itself is already gone (this happens in response to a ci request which involves committing the removal of a file). Set-static-directory pathname \\n This instructs the client to set the Entries.Static flag, which it should then send back to the server in a Static-directory request whenever the directory is operated on. pathname ends in a slash; its purpose is to specify a directory, not a file within a directory. Clear-static-directory pathname \\n Like Set-static-directory, but clear, not set, the flag. Set-sticky pathname \\n Additional data: tagspec \\n. Tell the client to set a sticky tag or date, which should be supplied with the Sticky request for future operations. pathname ends in a slash; its purpose is to specify a directory, not a file within a directory. The client should store tagspec and pass it back to the server as-is, to allow for future expansion. The first character of tagspec is T' for a tag, D' for a date, or something else for future expansion. The remainder of tagspec contains the actual tag or date. Clear-sticky pathname \\n Clear any sticky tag or date set by Set-sticky. Template pathname \\n Additional data: file transmission (note: compressed file transmissions are not supported). pathname ends in a slash; its purpose is to specify a directory, not a file within a directory. Tell the client to store the file transmission as the template log message, and then use that template in the future when prompting the user for a log message. Set-checkin-prog dir \\n Additional data: prog \\n. Tell the client to set a checkin program, which should be supplied with the Checkin-prog request for future operations. Set-update-prog dir \\n Additional data: prog \\n. Tell the client to set an update program, which should be supplied with the Update-prog request for future operations. Notified pathname \\n Indicate to the client that the notification for pathname has been done. There should be one such response for every Notify request; if there are several Notify requests for a single file, the requests should be processed in order; the first Notified response pertains to the first Notify request, etc. Module-expansion pathname \\n Return a file or directory which is included in a particular module. pathname is relative to cvsroot, unlike most pathnames in responses. pathname should be used to look and see whether some or all of the module exists on the client side; it is not necessarily suitable for passing as an argument to a co request (for example, if the modules file contains the -d' option, it will be the directory specified with -d', not the name of the module). Wrapper-rcsOption pattern -k 'option' \\n Transmit to the client a filename pattern which implies a certain keyword expansion mode. The pattern is a wildcard pattern (for example, *.exe'. The option is b' for binary, and so on. Note that although the syntax happens to resemble the syntax in certain CVS configuration files, it is more constrained; there must be exactly one space between pattern and -k' and exactly one space between -k' and '', and no string is permitted in place of -k' (extensions should be done with new responses, not by extending this one, for graceful handling of Valid-responses). M text \\n A one-line message for the user. Note that the format of text is not designed for machine parsing. Although sometimes scripts and clients will have little choice, the exact text which is output is subject to vary at the discretion of the server and the example output given in this document is just that, example output. Servers are encouraged to use the MT' response, and future versions of this document will hopefully standardize more of the MT' tags; see Text tags. Mbinary \\n Additional data: file transmission (note: compressed file transmissions are not supported). This is like M', except the contents of the file transmission are binary and should be copied to standard output without translation to local text file conventions. To transmit a text file to standard output, servers should use a series of M' requests. E text \\n Same as M but send to stderr not stdout. F \\n Flush stderr. That is, make it possible for the user to see what has been written to stderr (it is up to the implementation to decide exactly how far it should go to ensure this). MT tagname data \\n This response provides for tagged text. It is similar to SGML/HTML/XML in that the data is structured and a naive application can also make some sense of it without understanding the structure. The syntax is not SGML-like, however, in order to fit into the CVS protocol better and (more importantly) to make it easier to parse, especially in a language like perl or awk. The tagname can have several forms. If it starts with a' to z' or A' to Z', then it represents tagged text. If the implementation recognizes tagname, then it may interpret data in some particular fashion. If the implementation does not recognize tagname, then it should simply treat data as text to be sent to the user (similar to an M' response). There are two tags which are general purpose. The text' tag is similar to an unrecognized tag in that it provides text which will ordinarily be sent to the user. The newline' tag is used without data and indicates that a newline will ordinarily be sent to the user (there is no provision for embedding newlines in the data of other tagged text responses). If tagname starts with +' it indicates a start tag and if it starts with -' it indicates an end tag. The remainder of tagname should be the same for matching start and end tags, and tags should be nested (for example one could have tags in the following order +bold +italic text -italic -bold but not +bold +italic text -bold -italic). A particular start and end tag may be documented to constrain the tagged text responses which are valid between them. Note that if data is present there will always be exactly one space between tagname and data; if there is more than one space, then the spaces beyond the first are part of data. Here is an example of some tagged text responses. Note that there is a trailing space after Checking in' and initial revision:' and there are two trailing spaces after `<--'. Such trailing spaces are, of course, part of data. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 MT + checking - in MT text Checking in MT fname gz . tst MT text ; MT newline MT rcsfile / home / kingdon / zwork / cvsroot / foo / gz . tst , v MT text < -- MT fname gz . tst MT newline MT text initial revision : MT init - rev 1 . 1 MT newline MT text done MT newline MT - checking - in If the client does not support the `MT' response, the same responses might be sent as: 1 2 3 4 M Checking in gz . tst ; M / home / kingdon / zwork / cvsroot / foo / gz . tst , v < -- gz.tst M initial revision : 1 . 1 M done For a list of specific tags, see Text tags. error errno-code ' text \\n The command completed with an error. errno-code is a symbolic error code (e.g. ENOENT); if the server doesn't support this feature, or if it's not appropriate for this particular message, it just omits the errno-code (in that case there are two spaces after error'). Text is an error message such as that provided by strerror(), or any other message the server wants to use. The text is like the M response, in the sense that it is not particularly intended to be machine-parsed; servers may wish to print an error message with MT responses, and then issue a error response without text (although it should be noted that MT currently has no way of flagging the output as intended for standard error, the way that the E response does). ok \\n The command completed successfully. Next: Example, Previous: Responses, Up: Protocol 5.12 Tags for the MT tagged text response The MT response, as described in Responses, offers a way for the server to send tagged text to the client. This section describes specific tags. The intention is to update this section as servers add new tags. In the following descriptions, text and newline tags are omitted. Such tags contain information which is intended for users (or to be discarded), and are subject to change at the whim of the server. To avoid being vulnerable to such whim, clients should look for the tags listed here, not text, newline, or other tags. The following tag means to indicate to the user that a file has been updated. It is more or less redundant with the Created and Update-existing responses, but we don't try to specify here whether it occurs in exactly the same circumstances as Created and Update-existing. The name is the pathname of the file being updated relative to the directory in which the command is occurring (that is, the last Directory request which is sent before the command). 1 2 3 MT + updated MT fname name MT - updated The importmergecmd tag is used when doing an import which has conflicts, or when doing an import with the -X' flag. The client can use it to report how to merge in the newly imported changes. The count is the number of conflicts, or the string No if no conflicts occurred. (The latter will only be sent for imports run with the -X' flag.) The newly imported changes can be merged by running the following command: 1 2 3 4 5 6 7 cvs checkout - j tag1 - j tag2 repository MT + importmergecmd MT conflicts count MT mergetag1 tag1 MT mergetag2 tag2 MT repository repository MT - importmergecmd Next: Requirements, Previous: Text tags, Up: Protocol 5.13 Example Here is an example; lines are prefixed by C: ' to indicate the client sends them or S: ' to indicate the server sends them. The client starts by connecting, sending the root, and completing the protocol negotiation. In actual practice the lists of valid responses and requests would be longer. C: Root /u/cvsroot C: Valid-responses ok error Checked-in M E C: valid-requests S: Valid-requests Root Directory Entry Modified Argument Argumentx ci co S: ok C: UseUnchanged The client wants to check out the supermunger module into a fresh working directory. Therefore it first expands the supermunger module; this step would be omitted if the client was operating on a directory rather than a module. C: Argument supermunger C: Directory . C: . C: expand-modules The server replies that the supermunger module expands to the directory supermunger (the simplest case): 1 2 S : Module - expansion supermunger S : ok The client then proceeds to check out the directory. The fact that it sends only a single Directory request which specifies `.' for the working directory means that there is not already a supermunger directory on the client. C: Argument -N C: Argument supermunger C: Directory . C: . C: co The server replies with the requested files. In this example, there is only one file, mungeall.c. The Clear-sticky and Clear-static-directory requests are sent by the current implementation but they have no effect because the default is for those settings to be clear when a directory is newly created. 1 2 3 4 5 6 7 8 9 10 11 12 13 S : Clear-sticky supermunger / S : / u / cvsroot / supermunger / S : Clear-static-directory supermunger / S : / u / cvsroot / supermunger / S : E cvs server : Updating supermunger S : M U supermunger / mungeall . c S : Created supermunger / S : / u / cvsroot / supermunger / mungeall . c S : / mungeall . c / 1 . 1 /// S : u = rw , g = r , o = r S : 26 S : int mein () { abort () ; } S : ok The current client implementation would break the connection here and make a new connection for the next command. However, the protocol allows it to keep the connection open and continue, which is what we show here. After the user modifies the file and instructs the client to check it back in. The client sends arguments to specify the log message and file to check in: 1 2 3 4 5 C : Argument - m C : Argument Well , you see , it took me hours and hours to find C : Argumentx this typo and I searched and searched and eventually C : Argumentx had to ask John for help . C : Argument mungeall . c It also sends information about the contents of the working directory, including the new contents of the modified file. Note that the user has changed into the supermunger directory before executing this command; the top level directory is a user-visible concept because the server should print filenames in M and E responses relative to that directory. C: Directory . C: supermunger C: Entry /mungeall.c/1.1/// C: Modified mungeall.c C: u=rw,g=r,o=r C: 26 C: int main () { abort (); } And finally, the client issues the checkin command (which makes use of the data just sent): 1 C : ci And the server tells the client that the checkin succeeded: 1 2 3 4 5 6 7 8 9 S : M Checking in mungeall . c ; S : E / u / cvsroot / supermunger / mungeall . c , v < -- mungeall . c S : E new revision : 1 . 2 ; previous revision : 1 . 1 S : E done S : Mode u = rw , g = r , o = r S : Checked-in ./ S : / u / cvsroot / supermunger / mungeall . c S : / mungeall . c / 1 . 2 /// S : ok Next: Obsolete, Previous: Example, Up: Protocol 5.14 Required versus optional parts of the protocol The following are part of every known implementation of the CVS protocol (except obsolete, pre-1.5, versions of CVS) and it is considered reasonable behavior to completely fail to work if you are connected with an implementation which attempts to not support them. Requests: Root, Valid-responses, valid-requests, Directory, Entry, Modified, Unchanged, Argument, Argumentx, ci, co, update. Responses: ok, error, Valid-requests, Checked-in, Updated, Merged, Removed, M, E. A server need not implement Repository, but in order to interoperate with CVS 1.5 through 1.9 it must claim to implement it (in Valid-requests). The client will not actually send the request. Previous: Requirements, Up: Protocol 5.15 Obsolete protocol elements This section briefly describes protocol elements which are obsolete. There is no attempt to document them in full detail. There was a Repository request which was like Directory except it only provided repository, and the local directory was assumed to be similarly named. If the UseUnchanged request was not sent, there was a Lost request which was sent to indicate that a file did not exist in the working directory, and the meaning of sending Entries without Lost or Modified was different. All current clients (CVS 1.5 and later) will send UseUnchanged if it is supported.","title":"File Transmissions"}]}